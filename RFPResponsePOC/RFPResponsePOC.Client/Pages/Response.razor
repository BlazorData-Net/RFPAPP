@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@using System.Text
@using System.Collections.Generic
@using System.Linq
@using BlazorWebAssemblyPDF.Services
@using Newtonsoft.Json
@using RFPResponsePOC.Client.Services
@using RFPResponsePOC.Client.Models
@using RFPResponsePOC.Model
@using RFPResponsePOC.Models
@using Microsoft.AspNetCore.Components.Forms
@using RFPResponsePOC.AI
@using System.IO
@using Openize.Words
@using System.IO.Compression
@using System.Xml.Linq
@using Microsoft.AspNetCore.Components.Web
@using Radzen.Blazor
@inject NotificationService NotificationService
@inject DialogService DialogService
@inject IJSRuntime JsRuntime
@inject LogService LogService
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject SettingsService _SettingsService
@inject NavigationManager Navigation
@inject PdfToPngService PdfService
@inject HttpClient Http

@if (InProgress)
{
    <div style="position: fixed; top: 0; left: 0; width: 100%; height: 100%;
                                background-color: rgba(0,0,0,0.5); z-index: 1000;
                                display: flex; align-items: center; justify-content: center;">
        <div class="rz-card" style="padding: 20px;">
            <RadzenText Text="@CurrentStatus" class="rz-m-10" Style="text-align: center" />
            <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
        </div>
    </div>
}

<!-- Step 1: Choose or Create Template -->
<RadzenCard Style="margin-bottom: 20px;">
    <div style="display: flex; align-items: center;margin-bottom: 15px;">
        @if (!string.IsNullOrEmpty(SelectedTemplate))
        {
            <RadzenIcon Icon="check_circle" Style="color: green; margin-right: 5px;" />
        }
        <RadzenText TextStyle="TextStyle.H5"
                    Text="Step #1: Choose or Create a Template"
                    Style="margin-bottom: 0;" />
    </div>
    <div style="display: flex; align-items: center; gap: 10px;">
        <span><b>Template:</b></span>
        <RadzenDropDown @bind-Value="SelectedTemplate" Data="@templateOptions" TextProperty="" ValueProperty=""
                        Placeholder="Select Template" Style="width: 200px;" Change="OnTemplateSelectionChanged" />
        <RadzenButton Text="Edit Template" Icon="edit" Style="background-color: gray;"
                      ButtonStyle="ButtonStyle.Primary" Click="EditTemplate" />
    </div>
</RadzenCard>

<!-- Step 2: Enter or Upload Request for Proposal -->
<RadzenCard Style="margin-bottom: 20px;">
    <div style="display: flex; align-items: center;margin-bottom: 15px;">
        @if ((string.IsNullOrEmpty(RFPText)) == false)
        {
            <RadzenIcon Icon="check_circle" Style="color: green; margin-right: 5px;" />
        }
        <RadzenText TextStyle="TextStyle.H5" Text="Step #2: Enter or Upload Request for Proposal" Style="margin-bottom: 0;" />
    </div>
    <RadzenTextArea @bind-Value="RFPText"
                    Placeholder="Enter text from RFP (optional)"
                    Rows="3"
                    Style="width: 100%; margin-bottom: 10px;"
                    id="rfp-text-area" />
    <RadzenUpload @ref="uploader"
                  ChooseText="Or upload RFP (.docx/.pdf/.png/.jpg/.jpeg)" Accept=".docx,.png,.jpg,.jpeg,.pdf"
                  Change=@OnProposalUpload
                  Multiple="false"
                  Auto="true"
                  Style="width: 100%"
                  InputAttributes="@(new Dictionary<string,object>{ { "aria-label", "select file" }})">
    </RadzenUpload>
    <div style="margin-top: 10px;">
        <RadzenButton Text="Process RFP" Icon="play_arrow" Style="background-color: #28a745;"
                      ButtonStyle="ButtonStyle.Primary" Click="CreateProposal"
                      Disabled="@(string.IsNullOrEmpty(RFPText))" />
    </div>
</RadzenCard>

<!-- Step 3: Edit Answers to Detected Questions -->
<RadzenCard Style="margin-bottom: 20px;">
    <div style="display: flex; align-items: center;margin-bottom: 15px;">
        @if (identifiedQuestions?.Any() == true)
        {
            <RadzenIcon Icon="check_circle" Style="color: green; margin-right: 5px;" />
        }
        <RadzenText TextStyle="TextStyle.H5" Text="Step #3: Edit Answers to Detected Questions" Style="margin-bottom: 0;" />
    </div>
    @if (identifiedQuestions?.Any() == true)
    {
        <div style="max-height:400px; overflow-y:auto;">
            <RadzenDataGrid @ref="QuestionGrid" Data="@identifiedQuestions" TItem="QuestionResponse" AllowPaging="false">
                <Columns>
                    <RadzenDataGridColumn TItem="QuestionResponse" Property="Question" Title="Question" Width="40%">
                        <Template Context="questionResponse">
                            <div style="white-space:normal; overflow-wrap:break-word; line-height:1.4; padding:8px;">
                                @questionResponse.Question
                            </div>
                        </Template>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="QuestionResponse" Property="Response" Title="Answer" Width="45%">
                        <Template Context="questionResponse">
                            <RadzenTextArea @bind-Value="questionResponse.Response"
                                            Style="width:100%; min-height:80px;"
                                            Rows="4"
                                            Placeholder="Enter your answer here..." />
                        </Template>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="QuestionResponse" Property="AddToDatabase" Title="Add to Knowledgebase" Width="15%">
                        <Template Context="questionResponse">
                            <div style="text-align:center; padding:8px;">
                                <RadzenCheckBox @bind-Value="questionResponse.AddToDatabase" />
                            </div>
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        </div>
    }
    else
    {
        <div style="color: lightgray; font-style: italic;">
            No questions detected yet. Please complete Step #2 first.
        </div>
    }
</RadzenCard>

<!-- Step 4: Create Response -->
<RadzenCard Style="margin-bottom: 20px;">
    <div style="display: flex; align-items: center;margin-bottom: 15px;">
        @if (CanGenerateResponse())
        {
            <RadzenIcon Icon="check_circle" Style="color: green; margin-right: 5px;" />
        }
        <RadzenText TextStyle="TextStyle.H5" Text="Step #4: Create Response" Style="margin-bottom: 0;" />
    </div>
    @if (VenueTypeSelected)
    {
        <RadzenTabs RenderMode="TabRenderMode.Client">
            <Tabs>
                <RadzenTabsItem Text="Generate Final Response">
                    <div style="padding: 20px 0;">
                        <RadzenButton Text="Generate Response Document" Icon="description" Style="background-color: #007bff; margin-right: 10px;"
                                      ButtonStyle="ButtonStyle.Primary" Click="GenerateResponseDocument"
                                      Disabled="@(!CanGenerateResponse())" />
                        @if (CanGenerateResponse())
                        {
                            <span style="color: green;">Ready to generate response</span>
                        }
                        else
                        {
                            <span style="color: lightgray;">Complete previous steps to enable response generation</span>
                        }
                    </div>
                </RadzenTabsItem>

                <RadzenTabsItem Text="Venue Options">
                    <RadzenButton Text="Edit Capacity" Icon="edit" Style="margin-top:10px" ButtonStyle="ButtonStyle.Success" Click="EditCapacity" />
                    <span>&nbsp;</span>
                    <RadzenButton Text="Add Row" Icon="add" Style="margin-top:10px" ButtonStyle="ButtonStyle.Primary" Click="InsertRow" />
                    <span>&nbsp;</span>
                    @if (proposalRows?.Any() == true)
                    {
                        <RadzenButton Text="Calculate/Re-Calculate" Icon="calculate" Style="margin-top: 4px; background-color: green;" ButtonStyle="ButtonStyle.Primary" Click="CalculateProposal" />
                        <br />
                        <RadzenDataGrid @ref="grid" Data="@proposalRows" TItem="ProposalRow" EditMode="DataGridEditMode.Single" Editable="true" Style="margin-top:20px">
                            <Columns>
                                <RadzenDataGridColumn TItem="ProposalRow" Filterable="false" Sortable="false" Width="110px" TextAlign="TextAlign.Center" Title="EDIT/DEL">
                                    <Template Context="row">
                                        @if (grid.IsRowInEditMode(row))
                                        {
                                            <RadzenButton Icon="save" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.ExtraSmall"
                                                          Click="@((args) => SaveRow(row))" @onclick:stopPropagation="true"
                                                          title="Save row" />
                                            <span>&nbsp;</span>
                                            <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.ExtraSmall"
                                                          Click="@((args) => ConfirmDeleteRow(row))" @onclick:stopPropagation="true"
                                                          title="Delete row" />
                                        }
                                        else
                                        {
                                            <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Size="ButtonSize.ExtraSmall"
                                                          Click="@((args) => EditRow(row))" @onclick:stopPropagation="true"
                                                          title="Edit row" />
                                        }
                                    </Template>
                                </RadzenDataGridColumn>

                                <RadzenDataGridColumn TItem="ProposalRow" Property="Name" Title="Name" Width="200px">
                                    <Template Context="row">
                                        <div style="white-space:normal; overflow-wrap:break-word; line-height:1.4;">@row.Name</div>
                                    </Template>
                                    <EditTemplate Context="row">
                                        <RadzenTextBox @bind-Value="row.Name" Style="width:100%" />
                                    </EditTemplate>
                                </RadzenDataGridColumn>

                                <RadzenDataGridColumn TItem="ProposalRow" Title="Room" Width="180px">
                                    <Template Context="row">
                                        <div style="white-space:normal; overflow-wrap:break-word; line-height:1.4;">
                                            @(string.IsNullOrWhiteSpace(row.ManualRoom) ? row.SelectedRoom : row.ManualRoom)
                                        </div>
                                    </Template>
                                    <EditTemplate Context="row">
                                        <div style="display:flex; flex-direction:column">
                                            <RadzenDropDown Data="@roomOptions" @bind-Value="row.SelectedRoom" AllowClear="true" Style="width:100%" />
                                            <RadzenTextBox @bind-Value="row.ManualRoom" Style="width:100%; margin-top:5px" Placeholder="Override room" />
                                        </div>
                                    </EditTemplate>
                                </RadzenDataGridColumn>

                                <RadzenDataGridColumn TItem="ProposalRow" Property="StartDate" Title="Start Date" Width="130px">
                                    <Template Context="row">@row.StartDate.ToShortDateString()</Template>
                                    <EditTemplate Context="row">
                                        <RadzenDatePicker @bind-Value="row.StartDate" TValue="DateTime"
                                                          ShowTime="false"
                                                          DateFormat="MM/dd/yyyy" Style="width:100%" />
                                    </EditTemplate>
                                </RadzenDataGridColumn>

                                <RadzenDataGridColumn TItem="ProposalRow" Title="Start Time" Width="110px">
                                    <Template Context="row">@DateTime.Today.Add(row.StartTime).ToString("h:mm tt")</Template>
                                    <EditTemplate Context="row">
                                        <RadzenDatePicker @bind-Value="@row.StartTimeBinding"
                                                          TValue="DateTime"
                                                          ShowTime="true"
                                                          TimeOnly="true"
                                                          DateFormat="hh:mm tt"
                                                          HourFormat="12" />
                                    </EditTemplate>
                                </RadzenDataGridColumn>

                                <RadzenDataGridColumn TItem="ProposalRow" Property="EndDate" Title="End Date" Width="130px">
                                    <Template Context="row">@row.EndDate.ToShortDateString()</Template>
                                    <EditTemplate Context="row">
                                        <RadzenDatePicker @bind-Value="row.EndDate" TValue="DateTime"
                                                          ShowTime="false"
                                                          DateFormat="MM/dd/yyyy" Style="width:100%" />
                                    </EditTemplate>
                                </RadzenDataGridColumn>

                                <RadzenDataGridColumn TItem="ProposalRow" Title="End Time" Width="110px">
                                    <Template Context="row">@DateTime.Today.Add(row.EndTime).ToString("h:mm tt")</Template>
                                    <EditTemplate Context="row">
                                        <RadzenDatePicker @bind-Value="@row.EndTimeBinding"
                                                          TValue="DateTime"
                                                          ShowTime="true"
                                                          TimeOnly="true"
                                                          DateFormat="hh:mm tt"
                                                          HourFormat="12" />
                                    </EditTemplate>
                                </RadzenDataGridColumn>

                                <RadzenDataGridColumn TItem="ProposalRow" Property="RoomType" Title="Room Type" Width="120px">
                                    <Template Context="row">@row.RoomType</Template>
                                    <EditTemplate Context="row">
                                        <RadzenDropDown Data="@roomTypeOptions" @bind-Value="row.RoomType" Style="width:100%" />
                                    </EditTemplate>
                                </RadzenDataGridColumn>

                                <RadzenDataGridColumn TItem="ProposalRow" Property="Attendance" Title="Attendance" Width="100px">
                                    <Template Context="row">@row.Attendance</Template>
                                    <EditTemplate Context="row">
                                        <RadzenNumeric @bind-Value="row.Attendance" Style="width:100%" />
                                    </EditTemplate>
                                </RadzenDataGridColumn>

                                <RadzenDataGridColumn TItem="ProposalRow" Property="Notes" Title="Notes" Width="250px">
                                    <Template Context="row">
                                        <div style="white-space:normal; overflow-wrap:break-word; line-height:1.4; max-height:100px; overflow-y:auto;">
                                            @row.Notes
                                        </div>
                                    </Template>
                                    <EditTemplate Context="row">
                                        <RadzenTextArea @bind-Value="row.Notes" Style="width:100%; min-height:60px;" Rows="3" />
                                    </EditTemplate>
                                </RadzenDataGridColumn>
                            </Columns>
                        </RadzenDataGrid>
                    }
                </RadzenTabsItem>
            </Tabs>
        </RadzenTabs>
    }
    else
    {
        <div style="padding: 10px 0;">
            <RadzenButton Text="Generate Response Document" Icon="description" Style="background-color: #007bff;"
                          ButtonStyle="ButtonStyle.Primary" Click="GenerateResponseDocument"
                          Disabled="@(!CanGenerateResponse())" />
        </div>
        @if (!CanGenerateResponse())
        {
            <span style="color: lightgray;">Complete previous steps to enable response generation</span>
        }
    }
</RadzenCard>
<br />
<br />
<br />
<br />
<br />
<br />
<br />
<canvas id="pdfCanvas" style="display:none; border:1px solid #ccc;"></canvas>

@code {
    #nullable disable
    private IDisposable registration;
    Radzen.Blazor.RadzenUpload uploader;
    RadzenDataGrid<ProposalRow> grid;
    RadzenDataGrid<QuestionResponse> QuestionGrid;
    private DotNetObjectReference<Response> objRef;

    private string RFPText = string.Empty;
    private bool ProcessedRFP = false;

    private bool InProgress = false;
    private string CurrentStatus = "";

    AIResponse result = new AIResponse();
    ZipService objZipService = new ZipService();

    private List<QuestionResponse> identifiedQuestions = new();

    private List<ProposalRow> proposalRows = new();
    private List<string> roomOptions = new();
    private readonly List<string> roomTypeOptions = new()
    {
        "Banquet",
        "Conference",
        "Theatre",
        "Classroom",
        "U-Shape",
        "Boardroom",
        "Hollow Square",
        "Crescent Rounds",
        "Reception"
    };
    string BasePath = @"/RFPResponsePOC";
    string SelectedTemplate = "Default";
    private List<string> templateOptions = new();
    private bool VenueTypeSelected = false;

    public class ProposalRow
    {
        public string Name { get; set; }
        public string SelectedRoom { get; set; }
        public string ManualRoom { get; set; }
        public DateTime StartDate { get; set; }
        public TimeSpan StartTime { get; set; }
        public DateTime EndDate { get; set; }
        public TimeSpan EndTime { get; set; }
        public string RoomType { get; set; }
        public int Attendance { get; set; }
        public string Notes { get; set; }
        public DateTime StartTimeBinding { get => DateTime.Today.Add(StartTime); set => StartTime = value.TimeOfDay; }
        public DateTime EndTimeBinding { get => DateTime.Today.Add(EndTime); set => EndTime = value.TimeOfDay; }
    }

    private bool CanGenerateResponse()
    {
        return !string.IsNullOrEmpty(SelectedTemplate) && ProcessedRFP &&
               (!string.IsNullOrEmpty(RFPText) || identifiedQuestions?.Any() == true);
    }

    private async Task GenerateResponseDocument()
    {
        try
        {
            InProgress = true;
            CurrentStatus = "Generating response document...";
            StateHasChanged();

            // TODO: Implement the actual document generation logic
            // This would typically involve:
            // 1. Loading the selected template
            // 2. Replacing placeholders with answers from identifiedQuestions
            // 3. Adding venue proposal data if VenueTypeSelected
            // 4. Generating the final document (Word/PDF)

            await Task.Delay(2000); // Simulate processing

            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Success",
                Detail = "Response document generated successfully.",
                Duration = 4000
            });
        }
        catch (Exception ex)
        {
            await LogService.WriteToLogAsync($"[{DateTime.Now}] ERROR: Exception in GenerateResponseDocument - {ex.Message}");
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error",
                Detail = ex.Message,
                Duration = 8000
            });
        }
        finally
        {
            InProgress = false;
            StateHasChanged();
        }
    }

    async Task EditRow(ProposalRow row) => await grid.EditRow(row);

    ProposalRow newRow;

    private void SortProposalRows()
    {
        proposalRows = proposalRows
            .OrderBy(r => r.StartDate.Date)
            .ThenBy(r => r.StartTime)
            .ThenBy(r => r.EndDate.Date)
            .ThenBy(r => r.EndTime)
            .ThenBy(r => r.Name)
            .ToList();
    }

    private async Task SaveProposalRowsAsync()
    {
        try
        {
            var json = JsonConvert.SerializeObject(proposalRows, Formatting.Indented);
            await File.WriteAllTextAsync($"{BasePath}//ProposalRows.json", json);
        }
        catch (Exception ex)
        {
            await LogService.WriteToLogAsync($"[{DateTime.Now}] ERROR: Failed to save ProposalRows - {ex.Message}");
        }
    }

    private async Task LoadProposalRowsAsync()
    {
        try
        {
            var filePath = $"{BasePath}//ProposalRows.json";

            if (File.Exists(filePath))
            {
                var json = await File.ReadAllTextAsync(filePath);
                var rows = JsonConvert.DeserializeObject<List<ProposalRow>>(json);
                proposalRows = rows ?? new List<ProposalRow>();
                SortProposalRows();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            await LogService.WriteToLogAsync($"[{DateTime.Now}] ERROR: Failed to load ProposalRows - {ex.Message}");
        }
    }

    private async Task LoadTemplateOptionsAsync()
    {
        try
        {
            // Start with built-in templates
            var builtInTemplates = new List<string> { "Default", "DefaultVenue" };
            templateOptions = new List<string>(builtInTemplates);

            // Add user-saved templates from local storage
            try
            {
                var keys = await localStorage.KeysAsync();
                var userTemplates = keys
                    .Where(k => k.StartsWith("template_"))
                    .Select(k => k.Substring("template_".Length))
                    .Where(name => !builtInTemplates.Contains(name)) // Don't duplicate built-in templates
                    .OrderBy(name => name)
                    .ToList();

                templateOptions.AddRange(userTemplates);
            }
            catch (Exception ex)
            {
                await LogService.WriteToLogAsync($"[{DateTime.Now}] WARNING: Failed to load user templates from local storage - {ex.Message}");
            }

            // Set default selection if current selection is not available
            if (!templateOptions.Contains(SelectedTemplate))
            {
                SelectedTemplate = "Default";
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            await LogService.WriteToLogAsync($"[{DateTime.Now}] ERROR: Failed to load template options - {ex.Message}");
        }
    }

    async Task EditCapacity()
    {
        // Open Capacity.razor in a dialog
        var result = await DialogService.OpenAsync<Capacity>(
            "Edit Capacity",
            new Dictionary<string, object> { },
            new DialogOptions { Width = "800px", Height = "600px" });
    }

    async Task InsertRow()
    {
        newRow = new ProposalRow
        {
            StartDate = DateTime.Today,
            EndDate = DateTime.Today
        };
        proposalRows.Add(newRow);
        SortProposalRows();
        await SaveProposalRowsAsync();
        await grid.Reload();
        await grid.EditRow(newRow);
    }

    private async Task ConfirmDeleteRow(ProposalRow row)
    {
        var name = string.IsNullOrWhiteSpace(row?.Name) ? "this row" : $"'{row.Name}'";
        var confirmed = await DialogService.Confirm(
            $"Are you sure you want to delete {name}?",
            "Confirm Delete",
            new ConfirmOptions
            {
                OkButtonText = "Delete",
                CancelButtonText = "Cancel"
            });

        if (confirmed == true)
        {
            await DeleteRow(row);
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Info,
                Summary = "Deleted",
                Detail = $"{(row?.Name ?? "Row")} removed.",
                Duration = 3000
            });
        }
    }

    async Task DeleteRow(ProposalRow row)
    {
        if (proposalRows.Contains(row))
        {
            proposalRows.Remove(row);
            SortProposalRows();
            await SaveProposalRowsAsync();
            await grid.Reload();
        }
    }

    async Task SaveRow(ProposalRow row)
    {
        if (!string.IsNullOrEmpty(row.ManualRoom))
            row.SelectedRoom = null;

        var startDateTime = row.StartDate.Date.Add(row.StartTime);
        var endDateTime = row.EndDate.Date.Add(row.EndTime);
        if (endDateTime < startDateTime)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Warning,
                Summary = "Validation",
                Detail = "End time is earlier than start time.",
                Duration = 4000
            });
            return;
        }

        await grid.UpdateRow(row);
        SortProposalRows();
        await SaveProposalRowsAsync();
        await grid.Reload();
    }

    private async Task OnTemplateSelectionChanged(object value)
    {
        if (value != null)
        {
            SelectedTemplate = value.ToString();
            await CheckTemplateForVenueProposal();
        }
    }

    private async Task CheckTemplateForVenueProposal()
    {
        try
        {
            var templateContent = await GetTemplateContentAsync(SelectedTemplate);
            VenueTypeSelected = !string.IsNullOrWhiteSpace(templateContent) &&
                                   templateContent.Contains("[VENUE_PROPOSAL]", StringComparison.OrdinalIgnoreCase);

            await LogService.WriteToLogAsync($"[{DateTime.Now}] Template '{SelectedTemplate}' contains [VENUE_PROPOSAL]: {VenueTypeSelected}");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await LogService.WriteToLogAsync($"[{DateTime.Now}] ERROR: Failed to check template content - {ex.Message}");
            VenueTypeSelected = false;
            StateHasChanged();
        }
    }

    private async Task<string> GetTemplateContentAsync(string templateName)
    {
        try
        {
            // First try to load from local storage (user-saved templates)
            var localTemplate = await LoadTemplateFromLocalStorage(templateName);
            if (!string.IsNullOrEmpty(localTemplate))
            {
                return localTemplate;
            }

            // Then try to load from wwwroot templates (built-in templates)
            try
            {
                var templateUrl = GetTemplateUrl(templateName);
                return await Http.GetStringAsync(templateUrl);
            }
            catch
            {
                // If selected template doesn't exist, try to load from fallback locations
            }

            // Fallback to default template file
            if (File.Exists($"{BasePath}//Template.txt"))
            {
                return await File.ReadAllTextAsync($"{BasePath}//Template.txt");
            }
        }
        catch (Exception ex)
        {
            await LogService.WriteToLogAsync($"[{DateTime.Now}] ERROR: Failed to load template '{templateName}' - {ex.Message}");
        }
        return string.Empty;
    }

    private async Task<string> LoadTemplateFromLocalStorage(string templateName)
    {
        try
        {
            return await localStorage.GetItemAsStringAsync($"template_{templateName}");
        }
        catch
        {
            return string.Empty;
        }
    }

    private string GetTemplateUrl(string templateName)
    {
        return $"Templates/{templateName}.txt";
    }

    // Run on page load
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                objRef = DotNetObjectReference.Create(this);

                if (JsRuntime != null)
                {
                    await JsRuntime.InvokeVoidAsync("setupBeforeUnload", objRef);

                    // Setup real-time text monitoring for RFP text area
                    await JsRuntime.InvokeVoidAsync("pdfInterop.setupTextAreaMonitoring",
                        "#rfp-text-area", objRef, "OnRFPTextChanged", 500);
                }

                if (Navigation != null)
                {
                    registration = Navigation.RegisterLocationChangingHandler(OnLocationChanging);
                }

                if (JsRuntime != null && localStorage != null && _SettingsService != null && LogService != null)
                {
                    objZipService = new ZipService(JsRuntime, localStorage, _SettingsService, LogService);
                }

                await LoadProposalRowsAsync();
                await LoadTemplateOptionsAsync();

                // Check initial template for [VENUE_PROPOSAL]
                await CheckTemplateForVenueProposal();

                // Only reload grid if it's not null
                if (grid != null)
                {
                    await grid.Reload();
                }
            }
            catch (Exception ex)
            {
                // Log the error or handle it appropriately
                if (LogService != null)
                {
                    await LogService.WriteToLogAsync($"[{DateTime.Now}] ERROR: Exception in OnAfterRenderAsync - {ex.Message}");
                }
            }
        }
    }

    async Task EditTemplate(MouseEventArgs args)
    {
        var result = await DialogService.OpenAsync<EditTemplate>(
            "Edit Template",
            new Dictionary<string, object> { { "SelectedTemplate", SelectedTemplate } },
            new DialogOptions { Width = "700px", Height = "600px" });

        // If template was saved/modified, recheck for [VENUE_PROPOSAL]
        if (result == true)
        {
            await CheckTemplateForVenueProposal();
            await LoadTemplateOptionsAsync(); // Refresh template options in case new template was saved
        }
    }

    #region JavaScript
    private ValueTask OnLocationChanging(LocationChangingContext context)
    {
        string baseUrl = Navigation.BaseUri;
        if (context.TargetLocation != baseUrl)
        {
            Task.Run(async () => await objZipService.ZipTheFiles());
        }
        return ValueTask.CompletedTask;
    }

    [JSInvokable]
    public async Task HandleBeforeUnload() => await objZipService.ZipTheFiles();

    [JSInvokable]
    public async Task OnRFPTextChanged(string newValue)
    {
        try
        {
            // Update the RFPText property
            RFPText = newValue ?? string.Empty;

            // Optional: Log the change for debugging
            await LogService.WriteToLogAsync($"[{DateTime.Now}] RFP Text changed in real-time. Length: {RFPText.Length}");

            // Optional: You can add additional logic here when text changes
            // For example, auto-save, validation, etc.

            // Force UI refresh to update any related components
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await LogService.WriteToLogAsync($"[{DateTime.Now}] ERROR: Exception in OnRFPTextChanged - {ex.Message}");
        }
    }
    #endregion

    private async Task<List<QuestionResponse>> IdentifyQuestions()
    {
        List<QuestionResponse> _IdentifiedQuestions = new List<QuestionResponse>();

        try
        {
            var prompt = await Http.GetStringAsync("Prompts/IdentifyQuestions.prompt");
            prompt = prompt.Replace("{{RFPText}}", RFPText ?? string.Empty);

            await LogService.WriteToLogAsync($"[{DateTime.Now}] IdentifyQuestions: Sending prompt to AI...");

            var objOrchestratorMethods = new OrchestratorMethods(_SettingsService, LogService);
            var settingsService = new SettingsService();

            var response = await objOrchestratorMethods.CallOpenAIAsync(settingsService, prompt);

            await LogService.WriteToLogAsync($"[{DateTime.Now}] IdentifyQuestions: AI response received. Error: {response.Error ?? "None"}");
            await LogService.WriteToLogAsync($"[{DateTime.Now}] IdentifyQuestions: AI response length: {response.Response?.Length ?? 0}");

            if (string.IsNullOrWhiteSpace(response.Error))
            {
                await LogService.WriteToLogAsync($"[{DateTime.Now}] IdentifyQuestions: Attempting to deserialize JSON response");
                _IdentifiedQuestions = JsonConvert.DeserializeObject<List<QuestionResponse>>(response.Response) ?? new List<QuestionResponse>();
                await LogService.WriteToLogAsync($"[{DateTime.Now}] IdentifyQuestions: Deserialized {_IdentifiedQuestions.Count} questions");
            }
            else
            {
                await LogService.WriteToLogAsync($"[{DateTime.Now}] ERROR: IdentifyQuestions failed - {response.Error}");
            }
        }
        catch (Exception ex)
        {
            await LogService.WriteToLogAsync($"[{DateTime.Now}] ERROR: Exception in IdentifyQuestions - {ex.Message}");
        }

        return _IdentifiedQuestions;
    }

    private async Task OnProposalUpload(UploadChangeEventArgs e)
    {
        try
        {
            var file = e.Files.FirstOrDefault();

            if (file is null)
            {
                InProgress = false;
                StateHasChanged();
                return;
            }

            InProgress = true;
            CurrentStatus = "Reading file...";
            StateHasChanged();

            if (Path.GetExtension(file.Name).Equals(".docx", StringComparison.OrdinalIgnoreCase))
            {
                using var stream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024);
                using var ms = new MemoryStream();
                await stream.CopyToAsync(ms);
                ms.Position = 0;

                using var archive = new ZipArchive(ms, ZipArchiveMode.Read, leaveOpen: true);
                var entry = archive.GetEntry("word/document.xml");

                if (entry != null)
                {
                    using var entryStream = entry.Open();
                    var xdoc = XDocument.Load(entryStream);
                    XNamespace w = "http://schemas.openxmlformats.org/wordprocessingml/2006/main";
                    var sb = new StringBuilder();

                    var body = xdoc.Root?.Element(w + "body");
                    if (body != null)
                    {
                        foreach (var element in body.Elements())
                        {
                            if (element.Name == w + "p")
                            {
                                foreach (var text in element.Descendants(w + "t"))
                                    sb.Append(text.Value);
                                sb.AppendLine();
                            }
                            else if (element.Name == w + "tbl")
                            {
                                foreach (var row in element.Elements(w + "tr"))
                                {
                                    foreach (var cell in row.Elements(w + "tc"))
                                    {
                                        foreach (var text in cell.Descendants(w + "t"))
                                            sb.Append(text.Value);
                                        sb.Append("\t");
                                    }
                                    sb.AppendLine();
                                }
                                sb.AppendLine();
                            }
                        }
                    }

                    RFPText = sb.ToString();
                }
            }
            else
            {
                if (file.ContentType == "application/pdf")
                {
                    // Process all pages of the PDF
                    var pages = await PdfService.GetPdfPagesAsPngBytesAsync(file);
                    if (pages?.Any() == true)
                    {
                        var OCRprompt = await Http.GetStringAsync("Prompts/OCR.prompt");
                        var objOrchestratorMethods = new OrchestratorMethods(_SettingsService, LogService);
                        var settingsService = new SettingsService();

                        var allPageText = new StringBuilder();

                        for (int pageIndex = 0; pageIndex < pages.Count; pageIndex++)
                        {
                            CurrentStatus = $"Processing page {pageIndex + 1} of {pages.Count}...";
                            StateHasChanged();

                            var pageResult = await objOrchestratorMethods.CallOpenAIFileAsync(settingsService, OCRprompt, pages[pageIndex]);

                            if (!string.IsNullOrWhiteSpace(pageResult.Error))
                            {
                                await LogService.WriteToLogAsync($"[{DateTime.Now}] ERROR: OCR failed for page {pageIndex + 1} - {pageResult.Error}");
                                // Continue with other pages even if one fails
                                continue;
                            }

                            allPageText.AppendLine(pageResult.Response);
                            await LogService.WriteToLogAsync($"[{DateTime.Now}] Successfully processed page {pageIndex + 1}");
                        }

                        RFPText = allPageText.ToString();
                    }
                    else
                    {
                        InProgress = false;
                        StateHasChanged();
                        NotificationService.Notify(new NotificationMessage
                        {
                            Severity = NotificationSeverity.Error,
                            Summary = "Error",
                            Detail = "Failed to extract pages from PDF.",
                            Duration = 4000
                        });
                        return;
                    }
                }
                else
                {
                    // Handle other image formats (PNG, JPG, JPEG)
                    using var stream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024);
                    using var ms = new MemoryStream();
                    await stream.CopyToAsync(ms);
                    var imageBytes = ms.ToArray();

                    var OCRprompt = await Http.GetStringAsync("Prompts/OCR.prompt");
                    var objOrchestratorMethods = new OrchestratorMethods(_SettingsService, LogService);
                    var settingsService = new SettingsService();

                    result = await objOrchestratorMethods.CallOpenAIFileAsync(settingsService, OCRprompt, imageBytes);
                    RFPText = result.Response;
                }
            }

            await uploader.ClearFiles();

            await CreateProposal();
        }
        catch (Exception ex)
        {
            InProgress = false;
            StateHasChanged();

            await LogService.WriteToLogAsync($"[{DateTime.Now}] ERROR: Exception in OnProposalUpload - {ex.Message}");
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error",
                Detail = ex.Message,
                Duration = 8000
            });
        }
    }

    private async Task CreateProposal()
    {
        try
        {
            ProcessedRFP = true;
            InProgress = true;
            CurrentStatus = "Detecting any questions...";
            StateHasChanged();

            var questionsFromAI = await IdentifyQuestions();

            // No need to convert since IdentifyQuestions now returns List<QuestionResponse>
            identifiedQuestions = questionsFromAI ?? new List<QuestionResponse>();

            // Add logging to debug the QuestionGrid issue
            await LogService.WriteToLogAsync($"[{DateTime.Now}] CreateProposal: identifiedQuestions count = {identifiedQuestions?.Count ?? 0}");

            if (identifiedQuestions?.Any() == true)
            {
                // Get the prompt
                var prompt = await Http.GetStringAsync("Prompts/AnswerQuestion.prompt");

                await LogService.WriteToLogAsync($"[{DateTime.Now}] CreateProposal: First few questions: {string.Join(", ", identifiedQuestions.Take(3).Select(q => q.Question))}");
                var orchestrator = new OrchestratorMethods(_SettingsService, LogService);
                var total = identifiedQuestions.Count;
                for (int i = 0; i < identifiedQuestions.Count; i++)
                {
                    CurrentStatus = $"Answering question {i + 1} out of {total}...";
                    StateHasChanged();
                    await orchestrator.AnswerQuestionsFromKnowledgebase(identifiedQuestions[i], prompt, BasePath);
                }
            }

            // Refresh QuestionGrid data grid if it's not null
            if (QuestionGrid != null)
            {
                await QuestionGrid.Reload();
            }

            // Force UI update
            StateHasChanged();

            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Success",
                Detail = "RFP processed and questions detected.",
                Duration = 4000
            });
        }
        catch (Exception ex)
        {
            await LogService.WriteToLogAsync($"[{DateTime.Now}] ERROR: Exception in CreateProposal - {ex.Message}");
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error",
                Detail = ex.Message,
                Duration = 8000
            });
        }
        finally
        {
            InProgress = false;
            StateHasChanged();
        }
    }

    private async Task CalculateRoomsForExistingRows()
    {
        try
        {
            await LogService.WriteToLogAsync($"[{DateTime.Now}] CalculateRoomsForExistingRows started with {proposalRows?.Count ?? 0} rows");

            if (proposalRows == null || !proposalRows.Any())
            {
                await LogService.WriteToLogAsync($"[{DateTime.Now}] No existing proposal rows found");
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Warning,
                    Summary = "Warning",
                    Detail = "No proposal rows found. Please add some rows or upload a proposal first.",
                    Duration = 4000
                });
                return;
            }

            // Filter rows that need room assignments
            // #2: Ignore any ProposalRow that has ManualRoom set to any value other than null or empty string
            var rowsNeedingRooms = proposalRows.Where(row =>
                string.IsNullOrWhiteSpace(row.ManualRoom) &&
                string.IsNullOrWhiteSpace(row.SelectedRoom)).ToList();

            await LogService.WriteToLogAsync($"[{DateTime.Now}] Found {rowsNeedingRooms.Count} rows needing room assignments");

            if (!rowsNeedingRooms.Any())
            {
                await LogService.WriteToLogAsync($"[{DateTime.Now}] No rows require room assignments");
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Info,
                    Summary = "Info",
                    Detail = "All rows already have room assignments or manual room overrides.",
                    Duration = 4000
                });
                return;
            }

            // Convert ProposalRows to RoomsRequests
            var requests = rowsNeedingRooms.Select(row => new RoomsRequest
            {
                Name = row.Name ?? "Unknown",
                StartDate = row.StartDate,
                StartTime = row.StartTime,
                EndDate = row.EndDate,
                EndTime = row.EndTime,
                RoomType = row.RoomType ?? "",
                Attendance = row.Attendance,
                Notes = row.Notes ?? ""
            }).ToList();

            // Create JSON for the calculator
            var requestsJson = JsonConvert.SerializeObject(requests);
            await LogService.WriteToLogAsync($"[{DateTime.Now}] Created requests JSON for calculation: {requestsJson.Substring(0, Math.Min(500, requestsJson.Length))}");

            // Calculate room assignments
            var calculator = new CalculateProposal("/RFPResponsePOC", LogService);
            var assignments = await calculator.CalculateAsync(requestsJson);
            await LogService.WriteToLogAsync($"[{DateTime.Now}] Calculator returned {assignments?.Count ?? 0} assignments");

            // Update the proposal rows with calculated room assignments
            var assignmentDict = assignments.ToDictionary(a => a.Request?.Name ?? "", a => a.AssignedRoom);

            foreach (var row in rowsNeedingRooms)
            {
                if (assignmentDict.TryGetValue(row.Name ?? "", out var assignedRoom) && !string.IsNullOrWhiteSpace(assignedRoom))
                {
                    row.SelectedRoom = assignedRoom;
                    await LogService.WriteToLogAsync($"[{DateTime.Now}] Assigned room '{assignedRoom}' to row '{row.Name}'");
                }
                else
                {
                    await LogService.WriteToLogAsync($"[{DateTime.Now}] No room assigned for row '{row.Name}'");
                }
            }

            // Load room options for dropdown
            try
            {
                var capacityJson = await File.ReadAllTextAsync("/RFPResponsePOC/Capacity.json");
                var capacity = JsonConvert.DeserializeObject<CapacityRoot>(capacityJson);
                roomOptions = capacity?.Rooms?.Select(r => r.Name).OrderBy(n => n).ToList() ?? new List<string>();
            }
            catch (Exception ex)
            {
                await LogService.WriteToLogAsync($"[{DateTime.Now}] WARNING: Unable to load Capacity.json - {ex.Message}");
                roomOptions = new List<string>();
            }

            // Save the updated proposal rows and refresh UI
            SortProposalRows();
            await SaveProposalRowsAsync();
            StateHasChanged();

            var assignedCount = rowsNeedingRooms.Count(row => !string.IsNullOrWhiteSpace(row.SelectedRoom));
            await LogService.WriteToLogAsync($"[{DateTime.Now}] CalculateRoomsForExistingRows completed - assigned {assignedCount} of {rowsNeedingRooms.Count} rooms");

            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Success",
                Detail = $"Room calculation completed. Assigned {assignedCount} of {rowsNeedingRooms.Count} rooms.",
                Duration = 4000
            });
        }
        catch (Exception ex)
        {
            await LogService.WriteToLogAsync($"[{DateTime.Now}] ERROR: Exception in CalculateRoomsForExistingRows - {ex.Message}");
            await LogService.WriteToLogAsync($"[{DateTime.Now}] ERROR: Stack trace - {ex.StackTrace}");
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error",
                Detail = $"Failed to calculate rooms: {ex.Message}",
                Duration = 8000
            });
        }
        finally
        {
            InProgress = false;
            StateHasChanged();
        }
    }

    private async Task CalculateProposal()
    {
        try
        {
            InProgress = true;
            CurrentStatus = "Calculating...";
            StateHasChanged();

            await LogService.WriteToLogAsync($"[{DateTime.Now}] CalculateProposal method started");
            await LogService.WriteToLogAsync($"[{DateTime.Now}] RFPText content length: {RFPText?.Length ?? 0}");
            await LogService.WriteToLogAsync($"[{DateTime.Now}] RFPText content (first 1000 chars): {RFPText?.Substring(0, Math.Min(1000, RFPText?.Length ?? 0))}");

            // Handle case where RFPText is null or empty - calculate rooms for existing rows
            if (string.IsNullOrWhiteSpace(RFPText))
            {
                await LogService.WriteToLogAsync($"[{DateTime.Now}] RFPText is empty or null - calculating rooms for existing proposal rows");
                await CalculateRoomsForExistingRows();
                return;
            }

            string processedJsonText = RFPText;

            try
            {
                var testParse = JsonConvert.DeserializeObject(RFPText);
                await LogService.WriteToLogAsync($"[{DateTime.Now}] JSON parsing test successful. Object type: {testParse?.GetType().Name}");
                if (testParse is Newtonsoft.Json.Linq.JObject jObject)
                {
                    await LogService.WriteToLogAsync($"[{DateTime.Now}] Detected JSON object. Properties: {string.Join(", ", jObject.Properties().Select(p => p.Name))}");
                    var arrayProperty = jObject.Properties().FirstOrDefault(p => p.Value is Newtonsoft.Json.Linq.JArray);
                    if (arrayProperty != null)
                        processedJsonText = arrayProperty.Value.ToString();
                    else
                        processedJsonText = $"[{RFPText}]";
                }
            }
            catch (JsonReaderException jsonReadEx)
            {
                await LogService.WriteToLogAsync($"[{DateTime.Now}] ERROR: JSON format is invalid - {jsonReadEx.Message}");
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "JSON Format Error",
                    Detail = "The text does not contain valid JSON.",
                    Duration = 8000
                });
                return;
            }

            await LogService.WriteToLogAsync($"[{DateTime.Now}] Processed JSON text (first 1000 chars): {processedJsonText?.Substring(0, Math.Min(1000, processedJsonText?.Length ?? 0))}");

            var calculator = new CalculateProposal("/RFPResponsePOC", LogService);

            List<RoomAssignment> assigned;
            try
            {
                assigned = await calculator.CalculateAsync(processedJsonText);
                await LogService.WriteToLogAsync($"[{DateTime.Now}] Calculator.CalculateAsync completed successfully with {assigned?.Count ?? 0} results");
            }
            catch (FormatException formatEx)
            {
                await LogService.WriteToLogAsync($"[{DateTime.Now}] ERROR: Format exception in CalculateAsync - {formatEx.Message}");
                await LogService.WriteToLogAsync($"[{DateTime.Now}] ERROR: Stack trace - {formatEx.StackTrace}");
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Data Format Error",
                    Detail = $"Invalid data format detected: {formatEx.Message}. Please check the date/time or numeric values in your proposal.",
                    Duration = 8000
                });
                return;
            }
            catch (Exception calcEx)
            {
                await LogService.WriteToLogAsync($"[{DateTime.Now}] ERROR: Exception in CalculateAsync - {calcEx.Message}");
                await LogService.WriteToLogAsync($"[{DateTime.Now}] ERROR: Stack trace - {calcEx.StackTrace}");
                throw;
            }

            try
            {
                var capacityJson = await File.ReadAllTextAsync("/RFPResponsePOC/Capacity.json");
                var capacity = JsonConvert.DeserializeObject<CapacityRoot>(capacityJson);
                roomOptions = capacity?.Rooms?.Select(r => r.Name).OrderBy(n => n).ToList() ?? new List<string>();
            }
            catch (Exception ex)
            {
                await LogService.WriteToLogAsync($"[{DateTime.Now}] WARNING: Unable to load Capacity.json - {ex.Message}");
                roomOptions = new List<string>();
            }

            try
            {
                proposalRows = assigned.Select(a => new ProposalRow
                {
                    Name = a.Request?.Name ?? "Unknown",
                    SelectedRoom = a.AssignedRoom ?? "",
                    ManualRoom = string.Empty,
                    StartDate = a.Request?.StartDate ?? DateTime.Today,
                    StartTime = a.Request?.StartTime ?? TimeSpan.Zero,
                    EndDate = a.Request?.EndDate ?? DateTime.Today,
                    EndTime = a.Request?.EndTime ?? TimeSpan.Zero,
                    RoomType = a.Request?.RoomType ?? "",
                    Attendance = a.Request?.Attendance ?? 0,
                    Notes = a.Request?.Notes ?? ""
                }).ToList();
                SortProposalRows();
                await SaveProposalRowsAsync();
            }
            catch (Exception rowEx)
            {
                await LogService.WriteToLogAsync($"[{DateTime.Now}] ERROR: Exception creating ProposalRow objects - {rowEx.Message}");
                await LogService.WriteToLogAsync($"[{DateTime.Now}] ERROR: Stack trace - {rowEx.StackTrace}");
                throw;
            }

            RFPText = JsonConvert.SerializeObject(assigned, Formatting.Indented);

            await LogService.WriteToLogAsync($"[{DateTime.Now}] CalculateProposal completed successfully with {assigned.Count} assignments");

            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Success",
                Detail = "Calculation completed.",
                Duration = 4000
            });
        }
        catch (JsonException jsonEx)
        {
            await LogService.WriteToLogAsync($"[{DateTime.Now}] ERROR: JSON deserialization error in CalculateProposal - {jsonEx.Message}");
            await LogService.WriteToLogAsync($"[{DateTime.Now}] ERROR: JSON error stack trace - {jsonEx.StackTrace}");
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "JSON Error",
                Detail = $"Failed to parse JSON data: {jsonEx.Message}. Please ensure the proposal has been processed correctly.",
                Duration = 8000
            });
        }
        catch (Exception ex)
        {
            await LogService.WriteToLogAsync($"[{DateTime.Now}] ERROR: Exception in CalculateProposal - {ex.Message}");
            await LogService.WriteToLogAsync($"[{DateTime.Now}] ERROR: Exception type: {ex.GetType().Name}");
            await LogService.WriteToLogAsync($"[{DateTime.Now}] ERROR: Stack trace - {ex.StackTrace}");
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error",
                Detail = ex.Message,
                Duration = 8000
            });
        }
        finally
        {
            InProgress = false;
            StateHasChanged();
        }
    }

    private async Task DetectRoomRequests()
    {
        try
        {
            InProgress = true;
            CurrentStatus = "Detect Rooms Requests (2-3 minutes)...";
            StateHasChanged();

            await LogService.WriteToLogAsync($"[{DateTime.Now}] ProcessOCRText method started");

            var objOrchestratorMethods = new OrchestratorMethods(_SettingsService, LogService);
            var settingsService = new SettingsService();

            var Proposalprompt = await Http.GetStringAsync("Prompts/Proposal.prompt");
            Proposalprompt = Proposalprompt.Replace("{{OCRResult}}", RFPText);

            result = await objOrchestratorMethods.CallOpenAIAsync(settingsService, Proposalprompt);

            RFPText = $"[{result.Response}]";

            if (result.Error == "")
            {
                await CalculateProposal();
            }
            else
            {
                InProgress = false;
                StateHasChanged();

                await LogService.WriteToLogAsync($"[{DateTime.Now}] ERROR: ProcessOCRText failed - {result.Error}");
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = $"Failed to process... {result.Error}",
                    Duration = 4000
                });
            }
        }
        catch (Exception ex)
        {
            InProgress = false;
            StateHasChanged();

            await LogService.WriteToLogAsync($"[{DateTime.Now}] ERROR: Exception in ProcessOCRText - {ex.Message}");
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error",
                Detail = ex.Message,
                Duration = 8000
            });
        }
    }

    public void Dispose()
    {
        try
        {
            // Clean up JavaScript event listeners
            if (JsRuntime != null)
            {
                _ = Task.Run(async () =>
                {
                    try
                    {
                        await JsRuntime.InvokeVoidAsync("pdfInterop.removeTextAreaMonitoring", "#rfp-text-area");
                    }
                    catch (Exception ex)
                    {
                        // Log cleanup error but don't throw
                        Console.WriteLine($"Error cleaning up text area monitoring: {ex.Message}");
                    }
                });
            }
        }
        catch (Exception)
        {
            // Ignore cleanup errors
        }
        finally
        {
            objRef?.Dispose();
        }
    }
}