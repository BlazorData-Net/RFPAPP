@using System.Net.Http
@using Newtonsoft.Json
@using RFPResponsePOC.Client.Services
@inject HttpClient Http
@inject DialogService DialogService
@inject NotificationService NotificationService
@inject NavigationManager Navigation
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject RFPResponsePOC.Model.SettingsService _SettingsService
@inject RFPResponsePOC.Model.LogService LogService
@inject IJSRuntime JsRuntime

<RadzenTextArea @bind-Value="templateContent" Rows="20" Style="width:100%; min-height:400px;" />
<div style="margin-top:10px;">
    <RadzenButton Text="Save" Style="background-color: green;" ButtonStyle="ButtonStyle.Primary" Click="SaveTemplate" />
    <RadzenButton Text="Cancel" Style="margin-left:10px;" ButtonStyle="ButtonStyle.Light" Click="Cancel" />
</div>

@code {
    private IDisposable registration;
    string BasePath = "/RFPResponsePOC";
    string templateContent;
    string TemplateFile => $"{BasePath}/Template.txt";
    string DefaultTemplateUrl => "Templates/DefaultTemplate.txt";

    // Allow access to the JSRuntime
    private DotNetObjectReference<EditTemplate> objRef;

    RFPResponsePOC.Client.Services.ZipService objZipService = new RFPResponsePOC.Client.Services.ZipService();

     // Run on page load
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Set a reference to the current instance 
            objRef = DotNetObjectReference.Create(this);

            // Register the beforeunload event with JavaScript
            await JsRuntime.InvokeVoidAsync("setupBeforeUnload", objRef);

            // Register the location changing handler
            registration =
            Navigation.RegisterLocationChangingHandler(OnLocationChanging);

            // Initialize the ZipService
            objZipService = new ZipService(JsRuntime, localStorage, _SettingsService, LogService);

            // Check if Capacity.json exists and load it
            var TemplateTxt = await GetEditTemplateJsonAsync();

            if (!string.IsNullOrEmpty(TemplateTxt))
            {
                templateContent = TemplateTxt;
                StateHasChanged();
            }
            else
            {
                try
                {
                    templateContent = await Http.GetStringAsync(DefaultTemplateUrl);
                }
                catch
                {
                    templateContent = string.Empty;
                }
            }
        }
    }

    #region JavaScript
    private ValueTask OnLocationChanging(LocationChangingContext context)
    {
        // Get the base URL
        string baseUrl = Navigation.BaseUri;

        // Detect that user is going to counter page
        if (context.TargetLocation != baseUrl)
        {
            // User is navigating away from the page - Zip any files
            // Zip up any files and store in LocalStorage
            Task.Run(async () => await objZipService.ZipTheFiles());
        }

        return ValueTask.CompletedTask;
    }

    [JSInvokable]
    public async Task HandleBeforeUnload()
    {
        // User is navigating away from the page - Zip any files
        // Zip up any files and store in LocalStorage
        await objZipService.ZipTheFiles();
    }
    #endregion

    private async Task SaveTemplate()
    {
        await File.WriteAllTextAsync(TemplateFile, templateContent);
        NotificationService.Notify(new NotificationMessage
        {
            Severity = NotificationSeverity.Success,
            Summary = "Saved",
            Detail = "Template updated",
            Duration = 4000
        });
        DialogService.Close(true);
    }

    private void Cancel()
    {
        DialogService.Close(false);
    }

    private async Task<string> GetEditTemplateJsonAsync()
    {
        try
        {
            if (File.Exists($"{BasePath}//Template.txt"))
            {
                return await File.ReadAllTextAsync($"{BasePath}//Template.txt");
            }
        }
        catch (Exception ex)
        {
            // Log the exception if necessary
            Console.WriteLine($"Error reading Template.txt: {ex.Message}");
        }
        return null;
    }

    public void Dispose()
    {
        objRef?.Dispose();
    }
}
