@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@page "/"
@using System.Text
@using System.IO.Compression
@using RFPResponsePOC.Model
@using RFPResponsePOC.Models
@using Radzen.Blazor
@inject AppMetadata _AppMetadata
@inject LogService LogService
@inject NotificationService NotificationService
@inject DialogService DialogService
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject SettingsService _SettingsService
@inject AppMetadata _AppMetadata
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JsRuntime
<PageTitle>Home</PageTitle>
<RadzenMenu>
    @if (ApiKey.Length > 10)
    {
        <RadzenMenuItem Click="OnHomeClicked" Text="Home" Icon="home"></RadzenMenuItem>
        <RadzenMenuItem Click="OnLogsClicked" Text="Logs" Icon="assignment"></RadzenMenuItem>
        <RadzenMenuItem Click="OnUtilityClicked" Text="Utility" Icon="aspect_ratio"></RadzenMenuItem>
        <RadzenMenuItem Click="OnSettingsClicked" Text="Settings" Icon="line_style"></RadzenMenuItem>
    }
    else
    {
        <RadzenMenuItem Click="OnSettingsClicked" Text="Settings" Icon="line_style"></RadzenMenuItem>
    }
</RadzenMenu>
<br />
@if (@InProgress)
{
    <div class="rz-m-10">
        <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
    </div>
}
@if (HomeVisible)
{
    @if (ZipFileExists)
    {
        <p>
            <button class="btn btn-secondary" @onclick="UnzipFile">Unzip File To Directory</button>&nbsp;&nbsp;
            <button class="btn btn-secondary" @onclick="DownloadZipFile">Download Zip File</button>&nbsp;&nbsp;
            <button class="btn btn-danger" @onclick="DeleteZipFile">Delete Zip File</button>
        </p>
        <hr />
        <p>APIKey = @ApiKey</p>
        <p>AIModel = @AIModel</p>
    }
}
@if (SettingsVisible)
{
    <Settings SettingsChanged="HandleSettingsChanged"></Settings>
}
@if (LogsVisible)
{
    <Logs></Logs>
}
@if (UtilityVisible)
{
    <p>Utility</p>
}

@code {
#nullable disable
    private IDisposable registration;
    string ApiKey = "";
    string AIModel = "";

    bool InProgress = true;
    bool HomeVisible = true;
    bool SettingsVisible = false;
    bool LogsVisible = false;
    bool UtilityVisible = false;

    bool ZipFileExists = false;
    string BasePath = @"/RFPResponsePOC";

    // Allow access to the JSRuntime
    private DotNetObjectReference<Home> objRef;

    // Run on page load
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Set a reference to the current instance of Home
            objRef = DotNetObjectReference.Create(this);

            // Register the beforeunload event with JavaScript
            await JsRuntime.InvokeVoidAsync("setupBeforeUnload", objRef);

            try
            {
                // See if the Zip file exists in LocalStorage
                ZipFileExists = await localStorage.ContainKeyAsync("ZipFiles.zip");

                if (ZipFileExists)
                {
                    // If it exists, unzip the file and load settings
                    await UnzipFile();
                }
                else
                {
                    // Create Log file in the virtual directory
                    if (!File.Exists("RFPResponsePOCLog.csv"))
                    {
                        using (var streamWriter = new StreamWriter("RFPResponsePOCLog.csv"))
                        {
                            streamWriter.WriteLine("Application started at " + DateTime.Now + " [" + DateTime.Now.Ticks.ToString() + "]");
                        }
                    }

                    // Load Settings
                    _SettingsService.LoadSettings();

                    var ApiKey = _SettingsService.Settings.ApplicationSettings.ApiKey ?? "";
                    var AIModel = _SettingsService.Settings.ApplicationSettings.AIModel;

                    // Switch to the Settings page
                    HomeVisible = false;
                    SettingsVisible = true;
                    LogsVisible = false;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }

            InProgress = false;
            StateHasChanged();
        }
    }

    // Events

    void OnHomeClicked(MenuItemEventArgs args)
    {
        HomeVisible = true;
        SettingsVisible = false;
        UtilityVisible = false;
        LogsVisible = false;
    }

    void OnSettingsClicked(MenuItemEventArgs args)
    {
        HomeVisible = false;
        SettingsVisible = true;
        UtilityVisible = false;
        LogsVisible = false;
    }

    void OnLogsClicked(MenuItemEventArgs args)
    {
        HomeVisible = false;
        SettingsVisible = false;
        UtilityVisible = false;
        LogsVisible = true;
    }

    void OnUtilityClicked(MenuItemEventArgs args)
    {
        HomeVisible = false;
        SettingsVisible = false;
        UtilityVisible = true;
        LogsVisible = false;
    }

    private async Task HandleSettingsChanged()
    {
        _SettingsService.LoadSettings();
        ApiKey = _SettingsService.Settings.ApplicationSettings.ApiKey;

        // If there is a key show the Home page
        if (ApiKey.Length > 10)
        {
            HomeVisible = true;
            SettingsVisible = false;
            UtilityVisible = false;
            LogsVisible = false;

            await ZipTheFiles();
        }
    }

    // JavaScript Events

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            registration =
                Navigation.RegisterLocationChangingHandler(OnLocationChanging);
        }
    }

    private ValueTask OnLocationChanging(LocationChangingContext context)
    {
        // Get the base URL
        string baseUrl = Navigation.BaseUri;

        // Detect that user is going to counter page
        if (context.TargetLocation != baseUrl)
        {
            // User is navigating away from the page - Zip any files
            // Zip up any files and store in LocalStorage
            Task.Run(async () => await ZipTheFiles());
        }

        return ValueTask.CompletedTask;
    }

    [JSInvokable]
    public async Task HandleBeforeUnload()
    {
        // User is navigating away from the page - Zip any files
        // Zip up any files and store in LocalStorage
        await ZipTheFiles();
    }

    // Zip file methods

    private async Task ZipTheFiles()
    {
        string zipPath = @"/Zip";
        string zipFilePath = @"/Zip/ZipFiles.zip";

        // If zipFilePath exists, delete it
        if (File.Exists(zipFilePath))
        {
            File.Delete(zipFilePath);
        }

        // Create the directory if it doesn't exist
        if (!Directory.Exists(zipPath))
        {
            Directory.CreateDirectory(zipPath);
        }

        // If BasePath is not a directory, return
        if (!Directory.Exists(BasePath))
        {
            return;
        }

        // Create a zip file from the directory
        ZipFile.CreateFromDirectory(BasePath, zipFilePath);

        StateHasChanged();

        // Read the Zip file into a byte array
        byte[] exportFileBytes = File.ReadAllBytes(zipFilePath);
        StateHasChanged();

        // Convert byte array to Base64 string
        string base64String = Convert.ToBase64String(exportFileBytes);
        StateHasChanged();

        // Store base64String in the browser's local storage
        await localStorage.SetItemAsync("ZipFiles.zip", base64String);

        ZipFileExists = true;
    }

    private async Task UnzipFile()
    {
        try
        {
            string extractPath = @"/Zip";

            // If the extract directory does not exist, create it
            if (!Directory.Exists(extractPath))
            {
                Directory.CreateDirectory(extractPath);
            }

            // Get exportFileString from the browser's local storage
            string exportFileString = await localStorage.GetItemAsync<string>("ZipFiles.zip");

            // Convert the Base64 string to a byte array
            byte[] exportFileBytes = Convert.FromBase64String(exportFileString);

            // Write the byte array to a file
            await File.WriteAllBytesAsync($"{extractPath}/ZipFiles.zip", exportFileBytes);

            // Extract the zip file
            ZipFile.ExtractToDirectory($"{extractPath}/ZipFiles.zip", BasePath, true);

            // Load Settings
            _SettingsService.LoadSettings();

            ApiKey = _SettingsService.Settings.ApplicationSettings.ApiKey ?? "";
            AIModel = _SettingsService.Settings.ApplicationSettings.AIModel;

            // Switch to the Home page
            HomeVisible = true;
            SettingsVisible = false;
            LogsVisible = false;
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error",
                Detail = ex.Message,
                Duration = 8000
            });

            await LogService.WriteToLogAsync($"SettingsSave exception: {ex.GetBaseException().ToString()}");
        }
    }

    private async Task DownloadZipFile()
    {
        // Get exportFileString from the browser's local storage
        string base64String = await localStorage.GetItemAsync<string>("ZipFiles.zip");

        // Download the zip file
        await JsRuntime.InvokeVoidAsync("saveAsFile", "ZipFiles.zip", base64String);
    }

    private void DeleteZipFile()
    {
        // Remove the zip file from the browser's local storage
        localStorage.RemoveItemAsync("ZipFiles.zip");
        ZipFileExists = false;
    }

    #region private int ConvertToInteger(string strParamVersion)
    private int ConvertToInteger(string strParamVersion)
    {
        int intVersionNumber = 0;
        string strVersion = strParamVersion;

        // Split into parts seperated by periods
        char[] splitchar = { '.' };
        var strSegments = strVersion.Split(splitchar);

        // Process the segments
        int i = 0;
        List<int> colMultiplyers = new List<int> { 10000, 100, 1 };
        foreach (var strSegment in strSegments)
        {
            int intSegmentNumber = Convert.ToInt32(strSegment);
            intVersionNumber = intVersionNumber + (intSegmentNumber * colMultiplyers[i]);
            i++;
        }

        return intVersionNumber;
    }
    #endregion

    public void Dispose()
    {
        objRef?.Dispose();
    }
}