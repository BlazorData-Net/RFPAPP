@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@page "/"
@using System.Text
@using System.IO.Compression
@using Newtonsoft.Json
@using RFPResponseAPP.Client.Services
@using RFPResponseAPP.Client.Models
@using RFPResponseAPP.Model
@using RFPResponseAPP.Models
@using Radzen.Blazor
@inject AppMetadata _AppMetadata
@inject LogService LogService
@inject NotificationService NotificationService
@inject DialogService DialogService
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject SettingsService _SettingsService
@inject NavigationManager Navigation
@inject IJSRuntime JsRuntime
<style>
    /* Minimal helpers to keep things tidy with the default theme */
    .rz-container {
        max-width: 1200px;
        margin: 0 auto;
    }

    .rz-text-lg {
        font-size: 1.125rem;
    }

    .rz-gap-2 {
        gap: 1rem;
    }

    .rz-opacity-80 {
        opacity: .8;
    }

    .rz-opacity-90 {
        opacity: .9;
    }
</style>
<PageTitle>Home</PageTitle>
<RadzenMenu>
    @if (ShowMainMenu)
    {
        <RadzenMenuItem Click="OnHomeClicked" Text="Home" Icon="home" Style="@GetMenuItemStyle("Home")"></RadzenMenuItem>
        <RadzenMenuItem Click="OnKnowledgebaseClicked" Text="Knowledgebase" Icon="library_books" Style="@GetMenuItemStyle("Knowledgebase")"></RadzenMenuItem>
        <RadzenMenuItem Click="OnResponseClicked" Text="Response" Icon="aspect_ratio" Style="@GetMenuItemStyle("Response")"></RadzenMenuItem>
        <RadzenMenuItem Click="OnLogsClicked" Text="Logs" Icon="assignment" Style="@GetMenuItemStyle("Logs")"></RadzenMenuItem>
        <RadzenMenuItem Click="OnSettingsClicked" Text="Settings" Icon="line_style" Style="@GetMenuItemStyle("Settings")"></RadzenMenuItem>
    }
    else
    {
        <RadzenMenuItem Click="OnHomeClicked" Text="Home" Icon="home" Style="@GetMenuItemStyle("Home")"></RadzenMenuItem>
        <RadzenMenuItem Click="OnSettingsClicked" Text="Settings" Icon="line_style" Style="@GetMenuItemStyle("Settings")"></RadzenMenuItem>
    }
</RadzenMenu>
<br />
@if (@InProgress)
{
    <div class="rz-m-10">
        <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
    </div>
}
else
{
    @if (HomeVisible)
    {
        <div class="rz-p-4 rz-container">
            <div class="rz-col-12 rz-text-center rz-py-4" style="display: flex; justify-content: center; align-items: center;">
                @if (ApiKey.Length < 2)
                {
                    <RadzenButton class="step-button" Text="To get started enter your AI key on the Settings page" Click="@SettingsClicked" Style="background-color: green;" ButtonStyle="ButtonStyle.Primary" />
                }
                else
                {
                    @if (!KnowledgebaseFileExists)
                    {
                        <RadzenButton class="step-button" Text="Build your Knowledgebase" Click="@KnowledgebaseClicked" Style="background-color: green;" ButtonStyle="ButtonStyle.Primary" />
                    }
                    else
                    {
                        <RadzenButton class="step-button" Text="Click here to create an RFP Response" Click="@ResponseClicked" Style="background-color: green;" ButtonStyle="ButtonStyle.Primary" />
                    }
                }
            </div>
            <!-- HERO -->
            <RadzenCard Style="background: linear-gradient(180deg, #0d47a1 0%, #1565c0 100%); color: white;">
                <div class="rz-grid rz-align-center rz-justify-between">
                        <h1 class="rz-my-1">RFP Response Creator</h1>
                        <p class="rz-mt-0 rz-mb-3 rz-text-lg">
                            Automate professional RFP responses with AI—extract questions, generate answers, and produce polished proposals.
                            Includes intelligent venue assignment with conflict-free scheduling.
                        </p>                        
                    <div class="rz-col-12 rz-sm-5 rz-text-center rz-py-4">
                        <RadzenCard Style="background: rgba(255,255,255,0.1); border:1px solid rgba(255,255,255,0.2);">
                            <h3 class="rz-my-1">Two Powerful Modes</h3>
                            <div class="rz-mt-2">
                                <RadzenBadge Text="General RFPs" Style="margin-right:8px;" />
                                <RadzenBadge Text="Venue RFPs" Style="background:#ffb300; color:#000;" />
                            </div>
                            <p class="rz-mt-3 rz-opacity-90">
                                Choose a template, upload the RFP, review AI answers, assign rooms (venue mode), and export a polished document.
                            </p>
                        </RadzenCard>
                    </div>
                </div>
            </RadzenCard>

            <!-- WORKFLOW (TABS) -->
            <h2 class="rz-mt-5">How It Works</h2>
            <RadzenTabs @bind-SelectedIndex="selectedWorkflowTabIndex" Style="max-width: 1100px;">
                <Tabs>
                    <RadzenTabsItem Text="Template">
                        <Template>
                            <RadzenIcon Icon="article" Style="margin-right: 0.5rem;" />
                            1. Template
                        </Template>
                        <ChildContent>
                            <div class="rz-p-4">
                                <p>Select a built-in template (Default or DefaultVenue) or create your own with tokens.</p>
                            </div>
                        </ChildContent>
                    </RadzenTabsItem>
                    <RadzenTabsItem Text="Upload RFP">
                        <Template>
                            <RadzenIcon Icon="upload" Style="margin-right: 0.5rem;" />
                            2. Upload RFP
                        </Template>
                        <ChildContent>
                            <div class="rz-p-4">
                                <p>Upload .docx/.pdf/images; OCR extracts text for analysis.</p>
                            </div>
                        </ChildContent>
                    </RadzenTabsItem>
                    <RadzenTabsItem Text="Review Q&A">
                        <Template>
                            <RadzenIcon Icon="question_answer" Style="margin-right: 0.5rem;" />
                            3. Review Q&A
                        </Template>
                        <ChildContent>
                            <div class="rz-p-4">
                                <p>AI detects questions and drafts answers from your knowledge base—edit as needed.</p>
                            </div>
                        </ChildContent>
                    </RadzenTabsItem>
                    <RadzenTabsItem Text="Venue Assignment">
                        <Template>
                            <RadzenIcon Icon="event" Style="margin-right: 0.5rem;" />
                            4. Venue Assignment (optional)
                        </Template>
                        <ChildContent>
                            <div class="rz-p-4">
                                <p>(Optional only if using Venue mode) Auto-assign rooms by capacity, setup, and schedule with conflict checks.</p>
                            </div>
                        </ChildContent>
                    </RadzenTabsItem>
                    <RadzenTabsItem Text="Generate">
                        <Template>
                            <RadzenIcon Icon="download" Style="margin-right: 0.5rem;" />
                            5. Generate
                        </Template>
                        <ChildContent>
                            <div class="rz-p-4">
                                <p>Export professional Word documents, plus PDF/CSV tables for venues.</p>
                            </div>
                        </ChildContent>
                    </RadzenTabsItem>
                </Tabs>
            </RadzenTabs>

            <!-- FEATURES (TABS) -->
            <RadzenTabs Class="rz-mt-4" @bind-SelectedIndex="selectedTabIndex">
                <Tabs>
                    <RadzenTabsItem Text="General RFP Features">
                        <Template>
                            <RadzenIcon Icon="task" Style="margin-right: 0.5rem;" />
                            General RFP Features
                        </Template>
                        <ChildContent>
                            <div class="rz-grid rz-gap-2">
                                <div class="rz-col-12 rz-md-6">
                                    <RadzenCard>
                                        <h4><RadzenIcon Icon="upload_file" /> Document Processing</h4>
                                        <ul class="rz-ml-2">
                                            <li>OCR for PDFs, Word, and images using OpenAI vision</li>
                                            <li>Supports .docx, .pdf, .png, .jpg, .jpeg</li>
                                            <li>Automatic text extraction for analysis</li>
                                        </ul>
                                    </RadzenCard>
                                </div>
                                <div class="rz-col-12 rz-md-6">
                                    <RadzenCard>
                                        <h4><RadzenIcon Icon="help_center" /> Question Detection & Answers</h4>
                                        <ul class="rz-ml-2">
                                            <li>Detects and organizes questions in RFPs</li>
                                            <li>Embeddings-based matching to your knowledge base</li>
                                            <li>AI-generated drafts with manual editing</li>
                                        </ul>
                                    </RadzenCard>
                                </div>
                                <div class="rz-col-12 rz-md-6">
                                    <RadzenCard>
                                        <h4><RadzenIcon Icon="integration_instructions" /> Templates & Tokens</h4>
                                        <ul class="rz-ml-2">
                                            <li>Built-in "Default" template + custom templates</li>
                                            <li>Dynamic tokens like [BUSINESS_NAME], [EVENT_NAME]</li>
                                            <li>Organize and reuse content blocks</li>
                                        </ul>
                                    </RadzenCard>
                                </div>
                                <div class="rz-col-12 rz-md-6">
                                    <RadzenCard>
                                        <h4><RadzenIcon Icon="picture_as_pdf" /> Document Generation</h4>
                                        <ul class="rz-ml-2">
                                            <li>Formatted .docx with professional styling</li>
                                            <li>Export to PDF and CSV</li>
                                            <li>Consistent branding and layout</li>
                                        </ul>
                                    </RadzenCard>
                                </div>
                            </div>
                        </ChildContent>
                    </RadzenTabsItem>

                    <RadzenTabsItem Text="Venue RFP Features">
                        <Template>
                            <RadzenIcon Icon="event_seat" Style="margin-right: 0.5rem;" />
                            Venue RFP Features
                        </Template>
                        <ChildContent>
                            <div class="rz-grid rz-gap-2">
                                <div class="rz-col-12 rz-md-6">
                                    <RadzenCard>
                                        <h4><RadzenIcon Icon="table_rows" /> Capacity & Setup</h4>
                                        <ul class="rz-ml-2">
                                            <li>Upload capacity charts; AI extracts room data</li>
                                            <li>Supports 10 setups: Banquet, Conference, Theatre, Classroom, U-Shape, Boardroom, Hollow Square, Crescent Rounds, Reception, Square</li>
                                            <li>First-fit engine uses smallest suitable rooms</li>
                                        </ul>
                                    </RadzenCard>
                                </div>
                                <div class="rz-col-12 rz-md-6">
                                    <RadzenCard>
                                        <h4><RadzenIcon Icon="event_available" /> Scheduling Intelligence</h4>
                                        <ul class="rz-ml-2">
                                            <li>Time conflict detection to avoid overlaps</li>
                                            <li>Parent-child room grouping</li>
                                            <li>Re-calculation that preserves existing assignments</li>
                                        </ul>
                                    </RadzenCard>
                                </div>
                                <div class="rz-col-12 rz-md-6">
                                    <RadzenCard>
                                        <h4><RadzenIcon Icon="grid_on" /> Interactive Editing</h4>
                                        <ul class="rz-ml-2">
                                            <li>Edit room assignments in grids</li>
                                            <li>Live status during AI operations</li>
                                            <li>Step-by-step 4-stage workflow</li>
                                        </ul>
                                    </RadzenCard>
                                </div>
                                <div class="rz-col-12 rz-md-6">
                                    <RadzenCard>
                                        <h4><RadzenIcon Icon="format_list_bulleted" /> Venue Tables & Exports</h4>
                                        <ul class="rz-ml-2">
                                            <li>Auto-generated venue proposal tables</li>
                                            <li>Export venue details to Word/PDF/CSV</li>
                                            <li>Consistent formatting and branding</li>
                                        </ul>
                                    </RadzenCard>
                                </div>
                            </div>
                        </ChildContent>
                    </RadzenTabsItem>

                    <RadzenTabsItem Text="Data & Integrations">
                        <Template>
                            <RadzenIcon Icon="hub" Style="margin-right: 0.5rem;" />
                            Data & Integrations
                        </Template>
                        <ChildContent>
                            <div class="rz-grid rz-gap-2">
                                <div class="rz-col-12 rz-md-6">
                                    <RadzenCard>
                                        <h4><RadzenIcon Icon="storage" /> Data Management</h4>
                                        <ul class="rz-ml-2">
                                            <li>Save/load settings; local storage with backup/restore</li>
                                            <li>Zip packaging for portability</li>
                                            <li>Import/export full settings bundles</li>
                                        </ul>
                                    </RadzenCard>
                                </div>
                                <div class="rz-col-12 rz-md-6">
                                    <RadzenCard>
                                        <h4><RadzenIcon Icon="key" /> OpenAI Integration</h4>
                                        <ul class="rz-ml-2">
                                            <li>Supports GPT-4o, GPT-5, and compatible models</li>
                                            <li>Secure API key storage and validation</li>
                                            <li>Comprehensive logging and error tracking</li>
                                        </ul>
                                    </RadzenCard>
                                </div>
                            </div>
                        </ChildContent>
                    </RadzenTabsItem>
                </Tabs>
            </RadzenTabs>          

            <!-- TARGET USERS -->
            <div class="rz-mt-5 rz-grid rz-gap-2">
                <div class="rz-col-12 rz-md-3">
                    <RadzenCard>
                        <h4><RadzenIcon Icon="hotel" /> Venue Managers</h4>
                        <p>Hotels, conference centers, and event spaces streamline proposals and room scheduling.</p>
                    </RadzenCard>
                </div>
                <div class="rz-col-12 rz-md-3">
                    <RadzenCard>
                        <h4><RadzenIcon Icon="sell" /> Sales Teams</h4>
                        <p>Respond faster with accurate, consistent answers pulled from your own content.</p>
                    </RadzenCard>
                </div>
                <div class="rz-col-12 rz-md-3">
                    <RadzenCard>
                        <h4><RadzenIcon Icon="event" /> Event Planners</h4>
                        <p>Manage multi-track requirements with automated room assignments and conflict checks.</p>
                    </RadzenCard>
                </div>
                <div class="rz-col-12 rz-md-3">
                    <RadzenCard>
                        <h4><RadzenIcon Icon="insights" /> Business Development</h4>
                        <p>Standardize responses and win more bids with professional output every time.</p>
                    </RadzenCard>
                </div>
            </div>

            <!-- FAQ (ACCORDION) -->
            <h2 class="rz-mt-5">FAQ</h2>
            <RadzenAccordion @bind-SelectedIndex="selectedAccordionIndex" Multiple="true">
                <Items>
                    <RadzenAccordionItem Text="How does the AI find answers in my documents?">
                        <Template>
                            <RadzenIcon Icon="travel_explore" Style="margin-right: 0.5rem;" />
                            How does the AI find answers in my documents?
                        </Template>
                        <ChildContent>
                            <div class="rz-p-4">
                                <p>Your uploads are chunked and embedded (vector embeddings). The system semantically matches RFP questions to your stored content.</p>
                            </div>
                        </ChildContent>
                    </RadzenAccordionItem>
                    <RadzenAccordionItem Text="Can I override AI answers?">
                        <Template>
                            <RadzenIcon Icon="edit" Style="margin-right: 0.5rem;" />
                            Can I override AI answers?
                        </Template>
                        <ChildContent>
                            <div class="rz-p-4">
                                <p>Yes. Review and edit any response before exporting. Your edits can be saved into templates or tokens for reuse.</p>
                            </div>
                        </ChildContent>
                    </RadzenAccordionItem>
                    <RadzenAccordionItem Text="How do venue assignments work?">
                        <Template>
                            <RadzenIcon Icon="event_seat" Style="margin-right: 0.5rem;" />
                            How do venue assignments work?
                        </Template>
                        <ChildContent>
                            <div class="rz-p-4">
                                <p>We use a first-fit algorithm to assign the smallest suitable rooms based on capacity, setup, and availability, with conflict detection and re-calculation that preserves existing assignments.</p>
                            </div>
                        </ChildContent>
                    </RadzenAccordionItem>
                    <RadzenAccordionItem Text="What file formats are supported?">
                        <Template>
                            <RadzenIcon Icon="attach_file" Style="margin-right: 0.5rem;" />
                            What file formats are supported?
                        </Template>
                        <ChildContent>
                            <div class="rz-p-4">
                                <p>Uploads: .docx, .pdf, .png, .jpg, .jpeg. Exports: Word (.docx), PDF, and CSV.</p>
                            </div>
                        </ChildContent>
                    </RadzenAccordionItem>
                    <RadzenAccordionItem Text="Which models are supported?">
                        <Template>
                            <RadzenIcon Icon="hub" Style="margin-right: 0.5rem;" />
                            Which models are supported?
                        </Template>
                        <ChildContent>
                            <div class="rz-p-4">
                                <p>Works with GPT-4o, GPT-5, and other OpenAI-compatible models via API keys.</p>
                            </div>
                        </ChildContent>
                    </RadzenAccordionItem>
                </Items>
            </RadzenAccordion>

        </div>
        <br />
        <br />
        <br />
        <br />
        <br />
        <br />
    }
    @if (ResponseVisible)
    {
        <Response></Response>
    }
    @if (KnowledgebaseVisible)
    {
        <Knowledgebase></Knowledgebase>
    }
    @if (SettingsVisible)
    {
        <Settings SettingsChanged="HandleSettingsChanged"></Settings>
    }
    @if (LogsVisible)
    {
        <Logs></Logs>
    }
}

@code {
#nullable disable
    private IDisposable registration;

    // Allow access to the JSRuntime
    private DotNetObjectReference<Home> objRef;

    string BasePath = @"/RFPResponseAPP";

    bool ShowMainMenu = false;
    string ApiKey = "";
    string AIModel = "";

    bool InProgress = true;
    bool HomeVisible = true;
    bool SettingsVisible = false;
    bool LogsVisible = false;
    bool ResponseVisible = false;
    bool KnowledgebaseVisible = false;
    bool KnowledgebaseFileExists = false;
    int selectedTabIndex = 0;
    int selectedWorkflowTabIndex = 0;
    int selectedAccordionIndex = -1; // -1 means no item is expanded by default

    // Track active menu item for highlighting
    string ActiveMenuItem = "Home";

    ZipService objZipService = new ZipService();
    bool ZipFileExists = false;

    // Helper method to get inline style for menu items
    private string GetMenuItemStyle(string menuItem)
    {
        return ActiveMenuItem == menuItem 
            ? "background-color: lightgray !important; color: white !important; font-weight: bold !important;"
            : "";
    }

    // Run on page load
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Set a reference to the current instance of Home
            objRef = DotNetObjectReference.Create(this);

            // Register the beforeunload event with JavaScript
            await JsRuntime.InvokeVoidAsync("setupBeforeUnload", objRef);

            // Initialize the ZipService with DialogService so dialogs can show
            objZipService = new ZipService(JsRuntime, localStorage, _SettingsService, LogService, DialogService);

            try
            {
                ZipFileExists = await objZipService.IsZipFileExistsAsync();

                if (ZipFileExists)
                {
                    // If it exists, unzip the file
                    await objZipService.UnzipFile();
                }
                else
                {
                    // Create Log file in the virtual directory
                    if (!File.Exists(@"/RFPResponseAPP/RFPResponseAPPLog.csv"))
                    {
                        using (var streamWriter = new StreamWriter(@"/RFPResponseAPP/RFPResponseAPPLog.csv"))
                        {
                            streamWriter.WriteLine("Application started at " + DateTime.Now + " [" + DateTime.Now.Ticks.ToString() + "]");
                        }
                    }

                    ActiveMenuItem = "Home";
                    HomeVisible = true;
                    SettingsVisible = false;
                    LogsVisible = false;
                    ResponseVisible = false;
                    KnowledgebaseVisible = false;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }

            InProgress = false;

            // Load Settings
            _SettingsService.LoadSettings();

            ApiKey = _SettingsService.Settings.ApplicationSettings.ApiKey ?? "";
            AIModel = _SettingsService.Settings.ApplicationSettings.AIModel;

            // Check if API Key is entered
            if (ApiKey.Length > 1)
            {
                ShowMainMenu = true;
            }
            else
            {
                ShowMainMenu = false;

                ActiveMenuItem = "Home";
                HomeVisible = true;
                SettingsVisible = false;
                LogsVisible = false;
                ResponseVisible = false;
                KnowledgebaseVisible = false;
            }

            // Check if there is a Knowledgebase file with data
            if (File.Exists($"{BasePath}//knowledgebase.json"))
            {
                var knowledgebaseContent = await File.ReadAllTextAsync($"{BasePath}//knowledgebase.json");
                if (!string.IsNullOrWhiteSpace(knowledgebaseContent))
                {
                    try
                    {
                        var knowledgebaseData = JsonConvert.DeserializeObject<List<KnowledgeChunk>>(knowledgebaseContent);
                        if (knowledgebaseData != null && knowledgebaseData.Count > 0)
                        {
                            KnowledgebaseFileExists = true;
                        }
                    }
                    catch (System.Text.Json.JsonException)
                    {
                        KnowledgebaseFileExists = false;
                    }
                }
            }

            StateHasChanged();
        }
    }

    // Events

    void OnHomeClicked(MenuItemEventArgs args)
    {
        ActiveMenuItem = "Home";
        HomeVisible = true;
        SettingsVisible = false;
        ResponseVisible = false;
        LogsVisible = false;
        KnowledgebaseVisible = false;
    }

    void OnSettingsClicked(MenuItemEventArgs args)
    {
        ActiveMenuItem = "Settings";
        HomeVisible = false;
        SettingsVisible = true;
        ResponseVisible = false;
        LogsVisible = false;
        KnowledgebaseVisible = false;
    }

    void SettingsClicked(MouseEventArgs args)
    {
        ActiveMenuItem = "Settings";
        HomeVisible = false;
        SettingsVisible = true;
        ResponseVisible = false;
        LogsVisible = false;
        KnowledgebaseVisible = false;
    }

    void OnLogsClicked(MenuItemEventArgs args)
    {
        ActiveMenuItem = "Logs";
        HomeVisible = false;
        SettingsVisible = false;
        ResponseVisible = false;
        LogsVisible = true;
        KnowledgebaseVisible = false;
    }

    void OnResponseClicked(MenuItemEventArgs args)
    {
        ActiveMenuItem = "Response";
        HomeVisible = false;
        SettingsVisible = false;
        ResponseVisible = true;
        LogsVisible = false;
        KnowledgebaseVisible = false;
    }

    void OnKnowledgebaseClicked(MenuItemEventArgs args)
    {
        ActiveMenuItem = "Knowledgebase";
        HomeVisible = false;
        SettingsVisible = false;
        ResponseVisible = false;
        LogsVisible = false;
        KnowledgebaseVisible = true;
    }

    void KnowledgebaseClicked(MouseEventArgs args)
    {
        ActiveMenuItem = "Knowledgebase";
        HomeVisible = false;
        SettingsVisible = false;
        ResponseVisible = false;
        LogsVisible = false;
        KnowledgebaseVisible = true;
    }

    void ResponseClicked(MouseEventArgs args)
    {
        ActiveMenuItem = "Response";
        HomeVisible = false;
        SettingsVisible = false;
        ResponseVisible = true;
        LogsVisible = false;
        KnowledgebaseVisible = false;
    }

    private void HandleSettingsChanged()
    {
        _SettingsService.LoadSettings();

        ApiKey = _SettingsService.Settings.ApplicationSettings.ApiKey;
        AIModel = _SettingsService.Settings.ApplicationSettings.AIModel;

        ActiveMenuItem = "Home";
        HomeVisible = true;
        SettingsVisible = false;
        ResponseVisible = false;
        LogsVisible = false;
        KnowledgebaseVisible = false;

        ShowMainMenu = true;
        ZipFileExists = true;

        StateHasChanged();
    }

    // JavaScript Events

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            registration =
                Navigation.RegisterLocationChangingHandler(OnLocationChanging);
        }
    }

    #region JavaScript
    private ValueTask OnLocationChanging(LocationChangingContext context)
    {
        // Get the base URL
        string baseUrl = Navigation.BaseUri;

        // Detect that user is going to counter page
        if (context.TargetLocation != baseUrl)
        {
            // User is navigating away from the page - Zip any files
            // Zip up any files and store in LocalStorage
            Task.Run(async () => await objZipService.ZipTheFiles());
        }

        return ValueTask.CompletedTask;
    }

    [JSInvokable]
    public async Task HandleBeforeUnload()
    {
        // User is navigating away from the page - Zip any files
        // Zip up any files and store in LocalStorage
        await objZipService.ZipTheFiles();
    }
    #endregion

    public void Dispose()
    {
        // Remove the beforeunload callback when component is disposed
        if (objRef != null)
        {
            try
            {
                JsRuntime.InvokeVoidAsync("removeBeforeUnloadCallback", objRef);
            }
            catch (Exception)
            {
                // Ignore errors during disposal
            }
            objRef?.Dispose();
        }
        
        registration?.Dispose();
    }
}