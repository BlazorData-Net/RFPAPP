@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@page "/"
@using System.Text
@using System.IO.Compression
@using Newtonsoft.Json
@using RFPResponsePOC.Client.Services
@using RFPResponsePOC.Client.Models
@using RFPResponsePOC.Model
@using RFPResponsePOC.Models
@using Radzen.Blazor
@inject AppMetadata _AppMetadata
@inject LogService LogService
@inject NotificationService NotificationService
@inject DialogService DialogService
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject SettingsService _SettingsService
@inject AppMetadata _AppMetadata
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JsRuntime
<PageTitle>Home</PageTitle>
<RadzenMenu>
    @if (ShowMainMenu)
    {
        <RadzenMenuItem Click="OnHomeClicked" Text="Home" Icon="home"></RadzenMenuItem>
        <RadzenMenuItem Click="OnCapacityClicked" Text="Capacity" Icon="aspect_ratio"></RadzenMenuItem>
        <RadzenMenuItem Click="OnKnowledgebaseClicked" Text="Knowledgebase" Icon="library_books"></RadzenMenuItem>
        <RadzenMenuItem Click="OnProposalClicked" Text="Proposal" Icon="aspect_ratio"></RadzenMenuItem>
        <RadzenMenuItem Click="OnLogsClicked" Text="Logs" Icon="assignment"></RadzenMenuItem>
        <RadzenMenuItem Click="OnSettingsClicked" Text="Settings" Icon="line_style"></RadzenMenuItem>
    }
    else
    {
        <RadzenMenuItem Click="OnSettingsClicked" Text="Settings" Icon="line_style"></RadzenMenuItem>
    }
</RadzenMenu>
<br />
@if (@InProgress)
{
    <div class="rz-m-10">
        <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
    </div>
}
else
{
    @if (HomeVisible)
    {
        <div class="rz-card step-card">
            <h3 class="text-center">Welcome to RFP Response POC</h3>
            <div class="step-message">
                @if (CapacityFileExists)
                {
                    if (!KnowledgebaseFileExists)
                    {
                        <RadzenButton class="step-button" Text="Build Knowledgebase" Click="@KnowledgebaseClicked" Style="background-color: green;" ButtonStyle="ButtonStyle.Primary" />
                        <br />
                        <br />
                    }
                    <RadzenButton class="step-button" Text="Upload the RFPs" Click="@PrposalClicked" Style="background-color: green;" ButtonStyle="ButtonStyle.Primary" />
                }
                else
                {
                    <p class="text-center">Follow the steps below to get started</p>
                    <strong>Step One:</strong>
                    <br />
                    <br />
                    <RadzenButton class="step-button" Text="Upload your Capacity Chart" Click="@CapacityClicked" Style="background-color: green;" ButtonStyle="ButtonStyle.Primary" />
                    <br />
                    <br />
                    @if (!KnowledgebaseFileExists)
                    {
                        <strong>Step Two:</strong>
                        <br />
                        <br />
                        <RadzenButton class="step-button" Text="Build Knowledgebase" Click="@KnowledgebaseClicked" Style="background-color: green;" ButtonStyle="ButtonStyle.Primary" />
                        <br />
                        <br />
                        <strong>Step Three:</strong>
                        <br />
                        <br />
                        <RadzenButton class="step-button" Text="Upload the RFPs" Click="@PrposalClicked" Style="background-color: green;" ButtonStyle="ButtonStyle.Primary" />
                    }
                    else
                    {
                        <strong>Step Two:</strong>
                        <br />
                        <br />
                        <RadzenButton class="step-button" Text="Upload the RFPs" Click="@PrposalClicked" Style="background-color: green;" ButtonStyle="ButtonStyle.Primary" />
                    }
                }
            </div>
        </div>
    }
    @if (CapacityVisible)
    {
        <Capacity></Capacity>
    }
    @if (ProposalVisible)
    {
        <Proposal></Proposal>
    }
    @if (KnowledgebaseVisible)
    {
        <Knowledgebase></Knowledgebase>
    }
    @if (SettingsVisible)
    {
        <Settings SettingsChanged="HandleSettingsChanged"></Settings>
    }
    @if (LogsVisible)
    {
        <Logs></Logs>
    }
}

@code {
    #nullable disable
    private IDisposable registration;

    // Allow access to the JSRuntime
    private DotNetObjectReference<Home> objRef;

    string BasePath = @"/RFPResponsePOC";

    bool ShowMainMenu = false;
    string ApiKey = "";
    string AIModel = "";

    bool InProgress = true;
    bool HomeVisible = true;
    bool SettingsVisible = false;
    bool LogsVisible = false;
    bool CapacityVisible = false;
    bool ProposalVisible = false;
    bool KnowledgebaseVisible = false;
    bool CapacityFileExists = false;
    bool KnowledgebaseFileExists = false;

    ZipService objZipService = new ZipService();
    bool ZipFileExists = false;

    // Run on page load
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Set a reference to the current instance of Home
            objRef = DotNetObjectReference.Create(this);

            // Register the beforeunload event with JavaScript
            await JsRuntime.InvokeVoidAsync("setupBeforeUnload", objRef);

            // Initialize the ZipService with DialogService so dialogs can show
            objZipService = new ZipService(JsRuntime, localStorage, _SettingsService, LogService, DialogService);

            try
            {
                ZipFileExists = await objZipService.IsZipFileExistsAsync();

                if (ZipFileExists)
                {
                    // If it exists, unzip the file 
                    await objZipService.UnzipFile();
                }
                else
                {
                    // Create Log file in the virtual directory
                    if (!File.Exists(@"/RFPResponsePOC/RFPResponsePOCLog.csv"))
                    {
                        using (var streamWriter = new StreamWriter(@"/RFPResponsePOC/RFPResponsePOCLog.csv"))
                        {
                            streamWriter.WriteLine("Application started at " + DateTime.Now + " [" + DateTime.Now.Ticks.ToString() + "]");
                        }
                    }

                    // Switch to the Settings page
                    HomeVisible = false;
                    SettingsVisible = true;
                    LogsVisible = false;
                    CapacityVisible = false;
                    ProposalVisible = false;
                    KnowledgebaseVisible = false;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }

            InProgress = false;

            // Load Settings
            _SettingsService.LoadSettings();

            ApiKey = _SettingsService.Settings.ApplicationSettings.ApiKey ?? "";
            AIModel = _SettingsService.Settings.ApplicationSettings.AIModel;

            // Check if API Key is entered
            if(ApiKey.Length > 1)
            {
                ShowMainMenu = true;
            }
            else
            {
                ShowMainMenu = false;

                // Switch to the Settings page
                HomeVisible = false;
                SettingsVisible = true;
                LogsVisible = false;
                CapacityVisible = false;
                ProposalVisible = false;
                KnowledgebaseVisible = false;
            }

            // Check if there is a Capacity Chart file
            if (File.Exists($"{BasePath}//Capacity.json"))
            {
                // count how many records are in the file
                var capacityFileContent = await File.ReadAllTextAsync($"{BasePath}//Capacity.json");
                if (!string.IsNullOrEmpty(capacityFileContent))
                {
                    try
                    {
                        // Deserialize the content to check if it is valid JSON
                        var capacityData = JsonConvert.DeserializeObject<CapacityRoot>(capacityFileContent);

                        if (capacityData != null && capacityData.Rooms.Count > 0)
                        {
                            CapacityFileExists = true;
                        }
                    }
                    catch (System.Text.Json.JsonException)
                    {
                        // If deserialization fails, treat it as no valid data
                        CapacityFileExists = false;
                    }
                }
            }

            // Check if there is a Knowledgebase file with data
            if (File.Exists($"{BasePath}//knowledgebase.json"))
            {
                var knowledgebaseContent = await File.ReadAllTextAsync($"{BasePath}//knowledgebase.json");
                if (!string.IsNullOrWhiteSpace(knowledgebaseContent))
                {
                    try
                    {
                        var knowledgebaseData = JsonConvert.DeserializeObject<List<KnowledgeChunk>>(knowledgebaseContent);
                        if (knowledgebaseData != null && knowledgebaseData.Count > 0)
                        {
                            KnowledgebaseFileExists = true;
                        }
                    }
                    catch (System.Text.Json.JsonException)
                    {
                        KnowledgebaseFileExists = false;
                    }
                }
            }

            StateHasChanged();
        }
    }

    // Events

    void OnHomeClicked(MenuItemEventArgs args)
    {
        HomeVisible = true;
        SettingsVisible = false;
        CapacityVisible = false;
        ProposalVisible = false;
        LogsVisible = false;
        KnowledgebaseVisible = false;
    }

    void OnSettingsClicked(MenuItemEventArgs args)
    {
        HomeVisible = false;
        SettingsVisible = true;
        CapacityVisible = false;
        ProposalVisible = false;
        LogsVisible = false;
        KnowledgebaseVisible = false;
    }

    void OnLogsClicked(MenuItemEventArgs args)
    {
        HomeVisible = false;
        SettingsVisible = false;
        CapacityVisible = false;
        ProposalVisible = false;
        LogsVisible = true;
        KnowledgebaseVisible = false;
    }

    void OnCapacityClicked(MenuItemEventArgs args)
    {
        HomeVisible = false;
        SettingsVisible = false;
        CapacityVisible = true;
        ProposalVisible = false;
        LogsVisible = false;
        KnowledgebaseVisible = false;
    }

    void CapacityClicked(MouseEventArgs args)
    {
        HomeVisible = false;
        SettingsVisible = false;
        CapacityVisible = true;
        ProposalVisible = false;
        LogsVisible = false;
        KnowledgebaseVisible = false;
    }

    void OnProposalClicked(MenuItemEventArgs args)
    {
        HomeVisible = false;
        SettingsVisible = false;
        CapacityVisible = false;
        ProposalVisible = true;
        LogsVisible = false;
        KnowledgebaseVisible = false;
    }

    void OnKnowledgebaseClicked(MenuItemEventArgs args)
    {
        HomeVisible = false;
        SettingsVisible = false;
        CapacityVisible = false;
        ProposalVisible = false;
        LogsVisible = false;
        KnowledgebaseVisible = true;
    }

    void KnowledgebaseClicked(MouseEventArgs args)
    {
        HomeVisible = false;
        SettingsVisible = false;
        CapacityVisible = false;
        ProposalVisible = false;
        LogsVisible = false;
        KnowledgebaseVisible = true;
    }

    void PrposalClicked(MouseEventArgs args)
    {
        HomeVisible = false;
        SettingsVisible = false;
        CapacityVisible = false;
        ProposalVisible = true;
        LogsVisible = false;
        KnowledgebaseVisible = false;
    }

    private void HandleSettingsChanged()
    {
        _SettingsService.LoadSettings();

        ApiKey = _SettingsService.Settings.ApplicationSettings.ApiKey;
        AIModel = _SettingsService.Settings.ApplicationSettings.AIModel;

        HomeVisible = true;
        SettingsVisible = false;
        CapacityVisible = false;
        ProposalVisible = false;
        LogsVisible = false;
        KnowledgebaseVisible = false;

        ShowMainMenu = true;
        ZipFileExists = true;

        StateHasChanged();
    }

    // JavaScript Events

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            registration =
                Navigation.RegisterLocationChangingHandler(OnLocationChanging);
        }
    }

    #region JavaScript
    private ValueTask OnLocationChanging(LocationChangingContext context)
    {
        // Get the base URL
        string baseUrl = Navigation.BaseUri;

        // Detect that user is going to counter page
        if (context.TargetLocation != baseUrl)
        {
            // User is navigating away from the page - Zip any files
            // Zip up any files and store in LocalStorage
            Task.Run(async () => await objZipService.ZipTheFiles());
        }

        return ValueTask.CompletedTask;
    }

    [JSInvokable]
    public async Task HandleBeforeUnload()
    {
        // User is navigating away from the page - Zip any files
        // Zip up any files and store in LocalStorage
        await objZipService.ZipTheFiles();
    }    
    #endregion

    #region private int ConvertToInteger(string strParamVersion)
    private int ConvertToInteger(string strParamVersion)
    {
        int intVersionNumber = 0;
        string strVersion = strParamVersion;

        // Split into parts separated by periods
        char[] splitchar = { '.' };
        var strSegments = strVersion.Split(splitchar);

        // Process the segments
        int i = 0;
        List<int> colMultipliers = new List<int> { 10000, 100, 1 };
        foreach (var strSegment in strSegments)
        {
            int intSegmentNumber = Convert.ToInt32(strSegment);
            intVersionNumber = intVersionNumber + (intSegmentNumber * colMultipliers[i]);
            i++;
        }

        return intVersionNumber;
    }
    #endregion

    public void Dispose()
    {
        objRef?.Dispose();
    }
}