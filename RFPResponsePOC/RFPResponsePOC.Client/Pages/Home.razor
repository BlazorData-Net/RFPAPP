@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@page "/"
@inject AppMetadata _AppMetadata
@inject LogService LogService
@inject Blazored.LocalStorage.ISyncLocalStorageService localStorage
@inject SettingsService _SettingsService
@inject AppMetadata _AppMetadata
@inject HttpClient Http
@using RFPResponsePOC.Model
@using RFPResponsePOC.Models
@using Radzen.Blazor
<PageTitle>Home</PageTitle>
<RadzenMenu>
    @if (ApiKey.Length > 10)
    {
        <RadzenMenuItem Click="OnHomeClicked" Text="Home" Icon="home"></RadzenMenuItem>
        <RadzenMenuItem Click="OnLogsClicked" Text="Logs" Icon="assignment"></RadzenMenuItem>
        <RadzenMenuItem Click="OnUtilityClicked" Text="Utility" Icon="aspect_ratio"></RadzenMenuItem>
        <RadzenMenuItem Click="OnSettingsClicked" Text="Settings" Icon="line_style"></RadzenMenuItem>
    }
    else
    {
        <RadzenMenuItem Click="OnSettingsClicked" Text="Settings" Icon="line_style"></RadzenMenuItem>
    }
</RadzenMenu>
<br />
@if (@InProgress)
{
    <div class="rz-m-10">
        <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
    </div>
}
@if (HomeVisible)
{

}
@if (SettingsVisible)
{
    <Settings SettingsChanged="HandleSettingsChanged"></Settings>
}
@if (LogsVisible)
{
    <Logs></Logs>
}
@if (UtilityVisible)
{
    <p>Utility</p>
}

@code {
    string Organization = "";
    string ApiKey = "";

    bool InProgress = false;
    bool HomeVisible = true;
    bool SettingsVisible = false;
    bool LogsVisible = false;
    bool UtilityVisible = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Load Settings
            _SettingsService.LoadSettings();

            var ApiKey = _SettingsService.Settings.ApplicationSettings.ApiKey ?? "";
            var AIModel = _SettingsService.Settings.ApplicationSettings.AIModel;

            try
            {
                await LogService.WriteToLogAsync("Application started at " + DateTime.Now);

                if ((ApiKey == "") || (ApiKey.Length < 10))
                {
                    // Switch to the Settings page
                    HomeVisible = false;
                    SettingsVisible = true;
                    LogsVisible = false;
                }
                else
                {

                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }

        // call the base class
        base.OnInitialized();
    }

    // Events

    void OnHomeClicked(MenuItemEventArgs args)
    {
        HomeVisible = true;
        SettingsVisible = false;
        UtilityVisible = false;
        LogsVisible = false;
    }

    void OnSettingsClicked(MenuItemEventArgs args)
    {
        HomeVisible = false;
        SettingsVisible = true;
        UtilityVisible = false;
        LogsVisible = false;
    }

    void OnLogsClicked(MenuItemEventArgs args)
    {
        HomeVisible = false;
        SettingsVisible = false;
        UtilityVisible = false;
        LogsVisible = true;
    }

    void OnUtilityClicked(MenuItemEventArgs args)
    {
        HomeVisible = false;
        SettingsVisible = false;
        UtilityVisible = true;
        LogsVisible = false;
    }

    private void HandleSettingsChanged()
    {
        _SettingsService.LoadSettings();
        ApiKey = _SettingsService.Settings.ApplicationSettings.ApiKey;

        // If there is a key show the Home page
        if (ApiKey.Length > 10)
        {
            HomeVisible = true;
            SettingsVisible = false;
            UtilityVisible = false;
            LogsVisible = false;
        }
    }

    #region private int ConvertToInteger(string strParamVersion)
    private int ConvertToInteger(string strParamVersion)
    {
        int intVersionNumber = 0;
        string strVersion = strParamVersion;

        // Split into parts seperated by periods
        char[] splitchar = { '.' };
        var strSegments = strVersion.Split(splitchar);

        // Process the segments
        int i = 0;
        List<int> colMultiplyers = new List<int> { 10000, 100, 1 };
        foreach (var strSegment in strSegments)
        {
            int intSegmentNumber = Convert.ToInt32(strSegment);
            intVersionNumber = intVersionNumber + (intSegmentNumber * colMultiplyers[i]);
            i++;
        }

        return intVersionNumber;
    }
    #endregion
}