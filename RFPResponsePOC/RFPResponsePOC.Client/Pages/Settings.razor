@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@using static RFPResponsePOC.AI.OrchestratorMethods
@using Newtonsoft.Json;
@using RFPResponsePOC.AI
@using RFPResponsePOC.Client.Services
@using RFPResponsePOC.Model
@inherits OwningComponentBase
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NotificationService NotificationService
@inject DialogService DialogService
@inject SettingsService SettingsService
@inject LogService _LogService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
<h3>Settings</h3>
<RadzenRow AlignItems="AlignItems.Start" Wrap="FlexWrap.Wrap" Gap="1rem" Class="rz-p-sm-12">
    <RadzenColumn Size="12" SizeSM="6">
        <RadzenStack>

            <RadzenFormField Text="API Key:" Variant="@variant">
                <RadzenTextBox @bind-Value="@ApiKey"
                               Type="password"
                               Style="width:450px;"
                               @oninput="HandleApiKeyChange" />
            </RadzenFormField>


            <RadzenFormField Text="OpenAI Model:" Variant="@variant">
                <RadzenTextBox @bind-Value="@AIModel" Style="width:450px;" />
            </RadzenFormField>

            @if (!IsOpenAISettingsEntered)
            {

                <RadzenButton Text="An OpenAI API Key is required (Click here to get one)"
                              ButtonStyle="ButtonStyle.Secondary"
                              Click="OpenAIKeyLink"
                              Style="margin-bottom: 10px; width: 500px" />

            }
            else
            {
                <RadzenButton Text="Save"
                              ButtonStyle="ButtonStyle.Primary"
                              Click="SettingsSave"
                              Style="margin-bottom: 10px; width: 500px" />
            }
            @if (ZipFileExists)
            {
                <hr />
                <div style="display: flex; justify-content: center; align-items: center;">
                    <button class="btn btn-secondary" @onclick="objZipService.DownloadZipFile">Download Saved Settings</button>&nbsp;&nbsp;
                    <button class="btn btn-danger" @onclick="objZipService.DeleteZipFile">Delete Saved Settings</button>
                </div>
            }
        </RadzenStack>
    </RadzenColumn>
</RadzenRow>
@code {
#nullable disable
    [Parameter] public EventCallback SettingsChanged { get; set; }

    private IDisposable registration;

    // Allow access to the JSRuntime
    private DotNetObjectReference<Settings> objRef;
    ZipService objZipService = new ZipService();

    // Services
    private OrchestratorMethods objOrchestratorMethods;

    // Fields
    private bool IsOpenAISettingsEntered = false;
    private bool ShowApiKey { get; set; } = false;

    // Default Values
    private string ApiKey = "";
    private string AIModel = "o4-mini";
    private string AIEmbeddingModel = "";

    // Global fields
    bool ZipFileExists = false;
    Variant variant = Variant.Outlined;

    // Run on page load
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Set a reference to the current instance of Home
            objRef = DotNetObjectReference.Create(this);

            // Register the beforeunload event with JavaScript
            await JSRuntime.InvokeVoidAsync("setupBeforeUnload", objRef);

            // Register the location changing handler
            registration =
            Navigation.RegisterLocationChangingHandler(OnLocationChanging);

            // Initialize the ZipService
            objZipService = new ZipService(JSRuntime, localStorage, SettingsService, _LogService);

            ZipFileExists = await objZipService.IsZipFileExistsAsync();

            SettingsService.LoadSettings();

            objOrchestratorMethods = (OrchestratorMethods)ScopedServices.GetService(typeof(OrchestratorMethods));

            // Get APIKey from secure settings
            ApiKey = SettingsService.Settings.ApplicationSettings.ApiKey ?? "";
            AIModel = SettingsService.Settings.ApplicationSettings.AIModel;

            if (ApiKey.Length > 1)
            {
                IsOpenAISettingsEntered = true;
            }
            else
            {
                IsOpenAISettingsEntered = false;
            }

            StateHasChanged();
        }
    }

    private void HandleApiKeyChange(ChangeEventArgs e)
    {
        // Mark settings as entered if the user starts typing an API key
        ApiKey = e.Value?.ToString() ?? string.Empty;

        IsOpenAISettingsEntered = !string.IsNullOrWhiteSpace(ApiKey);
    }

    private void ToggleApiKeyVisibility()
    {
        ShowApiKey = !ShowApiKey;
    }

    private void APIKeyDetection(KeyboardEventArgs args)
    {
        IsOpenAISettingsEntered = true;
    }

    private async Task OpenAIKeyLink()
    {
        await JSRuntime.InvokeVoidAsync("open", "https://platform.openai.com/account/api-keys", "_blank");
    }

    private async Task SettingsSave()
    {
        try
        {
            if (!ApiKey.StartsWith("sk-"))
            {
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "Invalid API Key - must start with: sk-",
                    Duration = 4000
                });

                return;
            }

            // OpenAi or Azure Open AI requires API Key
            if (ApiKey.Length < 5)
            {
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "API Key is required",
                    Duration = 4000
                });

                return;
            }

            // Update Settings
            SettingsService settingsService = new SettingsService();

            SettingsService.ApplicationSettings applicationSettings = settingsService.Settings.ApplicationSettings;

            applicationSettings.ApiKey = ApiKey ?? "";
            applicationSettings.AIModel = AIModel;
            applicationSettings.AIEmbeddingModel = AIEmbeddingModel;

            await settingsService.UpdateSettingsAsync(applicationSettings);

            // Test API Key
            objOrchestratorMethods = new OrchestratorMethods(SettingsService, _LogService);

            var result = await objOrchestratorMethods.TestAccessAsync(ApiKey, AIModel);

            if (!result)
            {
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "Failed to connect to the AI service. Please check your API Key and Endpoint.",
                    Duration = 8000
                });

                await _LogService.WriteToLogAsync($"SettingsSave exception: Failed to connect to the AI service. Please check your API Key and Endpoint.");

                return;
            }

            await _LogService.WriteToLogAsync($"SettingsSave Model: {AIModel}");

            // Notify parent that settings have changed
            // This will trigger the parent component to refresh or take action
            await SettingsChanged.InvokeAsync();
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error",
                Detail = ex.Message,
                Duration = 8000
            });

            await _LogService.WriteToLogAsync($"SettingsSave exception: {ex.GetBaseException().ToString()}");
        }
    }

    #region JavaScript
    private ValueTask OnLocationChanging(LocationChangingContext context)
    {
        // Get the base URL
        string baseUrl = Navigation.BaseUri;

        // Detect that user is going to counter page
        if (context.TargetLocation != baseUrl)
        {
            // User is navigating away from the page - Zip any files
            // Zip up any files and store in LocalStorage
            Task.Run(async () => await objZipService.ZipTheFiles());
        }

        return ValueTask.CompletedTask;
    }

    [JSInvokable]
    public async Task HandleBeforeUnload()
    {
        // User is navigating away from the page - Zip any files
        // Zip up any files and store in LocalStorage
        await objZipService.ZipTheFiles();
    }
    #endregion

    public void Dispose()
    {
        objRef?.Dispose();
    }
}