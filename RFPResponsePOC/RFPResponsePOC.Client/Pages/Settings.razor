@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@inherits OwningComponentBase
@using static RFPResponsePOC.AI.OrchestratorMethods
@using Newtonsoft.Json;
@using RFPResponsePOC.AI
@using RFPResponsePOC.Client.Services
@using RFPResponsePOC.Model
@using Radzen
@using RFPResponsePOC.Client.Pages
@using Microsoft.AspNetCore.Components.Forms
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NotificationService NotificationService
@inject DialogService DialogService
@inject SettingsService SettingsService
@inject LogService _LogService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
<h3>Settings</h3>
<RadzenRow AlignItems="AlignItems.Start" Wrap="FlexWrap.Wrap" Gap="1rem" Class="rz-p-sm-12">
    <RadzenColumn Size="12" SizeSM="6">
        <RadzenStack>

            <RadzenFormField Text="API Key:" Variant="@variant">
                <RadzenTextBox @bind-Value="@ApiKey"
                               Type="password"
                               Style="width:450px;"
                               @oninput="HandleApiKeyChange" />
            </RadzenFormField>


            <RadzenFormField Text="OpenAI Model:" Variant="@variant">
                <RadzenDropDown @bind-Value="@AIModel" Data="@availableModels" Style="width: 450px;" TValue="string" />
            </RadzenFormField>

            <div style="display: flex; justify-content: center; align-items: center; gap:10px;">
            @if (!IsOpenAISettingsEntered)
            {
                <RadzenButton Text="An OpenAI API Key is required (Click here to get one)"
                              ButtonStyle="ButtonStyle.Secondary"
                              Click="OpenAIKeyLink"
                              Style="margin-bottom: 10px; width: 500px" />

                              <span>&nbsp;&nbsp;</span>

                              <InputFile id="file-upload-settings" 
                              OnChange="OnSettingsUpload" 
                              accept=".zip" 
                              style="display: none;" />
            }
            else
            {
                <RadzenButton Text="Save"
                              ButtonStyle="ButtonStyle.Primary"
                              Click="SettingsSave"
                              Style="margin-bottom: 10px; width: 200px" />
            }
            </div>

            @if (ZipFileExists)
            {
                <hr />
                <div style="display: flex; justify-content: center; align-items: center; gap:8px;">
                    @if (IsDownloading)
                    {
                        <RadzenButton Disabled="true" Style="min-width:190px;" ButtonStyle="ButtonStyle.Primary">
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            <span style="margin-left:4px;">Downloading...</span>
                        </RadzenButton>
                    }
                    else
                    {
                        <RadzenButton Disabled="false" Style="min-width:190px;" ButtonStyle="ButtonStyle.Primary" Click="@(async () => await DownloadSettingsAsync())">Download Settings</RadzenButton>
                    }
                    <label for="file-upload-settings" 
                           class="rz-button rz-button-md rz-secondary rz-shade-default" 
                           style="min-width:190px; cursor:pointer; display:inline-flex; align-items:center; justify-content:center; text-decoration:none; margin:0; padding: 0.375rem 0.75rem; border: 1px solid transparent; font-size: 0.875rem; line-height: 1.5; border-radius: 0.25rem; color: #fff; background-color: #6c757d; border-color: #6c757d;"
                           disabled="@IsDownloading">
                        @if (IsUploading)
                        {
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            <span style="margin-left:4px;">Uploading...</span>
                        }
                        else
                        {
                            <span>Upload Settings</span>
                        }
                    </label>
                    <RadzenButton Disabled="@(IsDownloading || IsUploading)" Text="Delete Saved Settings" ButtonStyle="ButtonStyle.Danger" Click="@(() => DeleteSettings())" />
                </div>
            }

            @if (IsUploading)
            {
                <div style="display: flex; justify-content: center; align-items: center; margin-top: 10px;">
                    <div class="rz-card" style="padding: 10px;">
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        <span style="margin-left:4px;">Uploading and extracting settings...</span>
                    </div>
                </div>
            }

            <InputFile id="file-upload-settings" 
                       OnChange="OnSettingsUpload" 
                       accept=".zip" 
                       style="display: none;" 
                       disabled="@(IsDownloading || IsUploading)" />

        </RadzenStack>
    </RadzenColumn>
</RadzenRow>
@code {
#nullable disable
    [Parameter] public EventCallback SettingsChanged { get; set; }

    private IDisposable registration;

    private DotNetObjectReference<Settings> objRef;
    ZipService objZipService = new ZipService();

    private OrchestratorMethods objOrchestratorMethods;

    private bool IsOpenAISettingsEntered = false;
    private bool ShowApiKey { get; set; } = false;

    private string ApiKey = "";
    private string AIModel = "";
    private string AIEmbeddingModel = "";
    private List<string> availableModels = new List<string> { "o4-mini", "gpt-4o", "gpt-5", "gpt-5-mini" };

    bool ZipFileExists = false;
    Variant variant = Variant.Outlined;
    bool IsDownloading = false;
    bool IsUploading = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            objRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("setupBeforeUnload", objRef);

            registration = Navigation.RegisterLocationChangingHandler(OnLocationChanging);

            objZipService = new ZipService(JSRuntime, localStorage, SettingsService, _LogService, DialogService);

            ZipFileExists = await objZipService.IsZipFileExistsAsync();

            SettingsService.LoadSettings();

            objOrchestratorMethods = (OrchestratorMethods)ScopedServices.GetService(typeof(OrchestratorMethods));

            ApiKey = SettingsService.Settings.ApplicationSettings.ApiKey ?? "";
            AIModel = SettingsService.Settings.ApplicationSettings.AIModel;

            IsOpenAISettingsEntered = ApiKey.Length > 1;

            StateHasChanged();
        }
    }

    private void HandleApiKeyChange(ChangeEventArgs e)
    {
        ApiKey = e.Value?.ToString() ?? string.Empty;
        IsOpenAISettingsEntered = !string.IsNullOrWhiteSpace(ApiKey);
    }

    private async Task OnSettingsUpload(InputFileChangeEventArgs e)
    {
        try
        {
            var file = e.File;

            if (file is null)
            {
                return;
            }

            if (!file.Name.EndsWith(".zip", StringComparison.OrdinalIgnoreCase))
            {
                NotificationService.Notify(new NotificationMessage 
                { 
                    Severity = NotificationSeverity.Error, 
                    Summary = "Error", 
                    Detail = "Please select a .zip file", 
                    Duration = 4000 
                });
                return;
            }

            IsUploading = true;
            StateHasChanged();

            using var stream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024);
            using var ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            var zipBytes = ms.ToArray();

            // Upload and store the zip file
            await objZipService.UploadZipFile(zipBytes);

            // Extract the uploaded zip file
            await objZipService.UnzipFile();

            // Log the upload after extraction is complete
            await _LogService.WriteToLogAsync($"[{DateTime.Now}] Settings zip file '{file.Name}' uploaded and extracted successfully.");

            // Update the state
            ZipFileExists = true;
            IsUploading = false;
            StateHasChanged();

            // Reload settings
            SettingsService.LoadSettings();
            ApiKey = SettingsService.Settings.ApplicationSettings.ApiKey ?? "";
            AIModel = SettingsService.Settings.ApplicationSettings.AIModel;
            IsOpenAISettingsEntered = ApiKey.Length > 1;

            // Notify the parent component that settings changed
            await SettingsChanged.InvokeAsync();

            NotificationService.Notify(new NotificationMessage 
            { 
                Severity = NotificationSeverity.Success, 
                Summary = "Success", 
                Detail = "Settings uploaded and extracted successfully", 
                Duration = 4000 
            });

            StateHasChanged();
        }
        catch (Exception ex)
        {
            IsUploading = false;
            StateHasChanged();

            NotificationService.Notify(new NotificationMessage 
            { 
                Severity = NotificationSeverity.Error, 
                Summary = "Error", 
                Detail = $"Failed to upload settings: {ex.Message}", 
                Duration = 8000 
            });

            await _LogService.WriteToLogAsync($"OnSettingsUpload exception: {ex.GetBaseException().ToString()}");
        }
    }

    private async Task DeleteSettings()
    {
        var confirmed = await DialogService.Confirm(
            "Are you sure you want to delete the saved settings?",
            "Confirm Delete",
            new ConfirmOptions
            {
                OkButtonText = "Delete",
                CancelButtonText = "Cancel"
            });

        if (confirmed == true)
        {
            objZipService.DeleteZipFile();
            ZipFileExists = false;
            StateHasChanged();
            
            NotificationService.Notify(new NotificationMessage 
            { 
                Severity = NotificationSeverity.Info, 
                Summary = "Deleted", 
                Detail = "Saved settings have been deleted", 
                Duration = 3000 
            });
        }
    }

    private void ToggleApiKeyVisibility() => ShowApiKey = !ShowApiKey;
    private void APIKeyDetection(KeyboardEventArgs args) => IsOpenAISettingsEntered = true;

    private async Task OpenAIKeyLink() => await JSRuntime.InvokeVoidAsync("open", "https://platform.openai.com/account/api-keys", "_blank");

    private async Task SettingsSave()
    {
        try
        {
            if (!ApiKey.StartsWith("sk-"))
            {
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error", Detail = "Invalid API Key - must start with: sk-", Duration = 4000 });
                return;
            }
            if (ApiKey.Length < 5)
            {
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error", Detail = "API Key is required", Duration = 4000 });
                return;
            }
            SettingsService settingsService = new SettingsService();
            SettingsService.ApplicationSettings applicationSettings = settingsService.Settings.ApplicationSettings;
            applicationSettings.ApiKey = ApiKey ?? "";
            applicationSettings.AIModel = AIModel;
            applicationSettings.AIEmbeddingModel = AIEmbeddingModel;
            objOrchestratorMethods = new OrchestratorMethods(SettingsService, _LogService);
            var result = await objOrchestratorMethods.TestAccessAsync(ApiKey, AIModel);
            if (!result)
            {
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error", Detail = "Failed to connect to the AI service. Please check your API Key and Endpoint.", Duration = 8000 });
                await _LogService.WriteToLogAsync($"SettingsSave exception: Failed to connect to the AI service. Please check your API Key and Endpoint.");
                return;
            }
            await settingsService.UpdateSettingsAsync(applicationSettings);
            await _LogService.WriteToLogAsync($"SettingsSave Model: {AIModel}");
            await SettingsChanged.InvokeAsync();
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error", Detail = ex.Message, Duration = 8000 });
            await _LogService.WriteToLogAsync($"SettingsSave exception: {ex.GetBaseException().ToString()}");
        }
    }

    private async Task DownloadSettingsAsync()
    {
        if (IsDownloading) return;
        IsDownloading = true;

        // Ensure the UI is updated before starting the download
        // do a task wait to ensure the UI is responsive
        await Task.Delay(100);

        StateHasChanged();
        try
        {
            await objZipService.ZipTheFiles();
            await objZipService.DownloadZipFile();
        }
        finally
        {
            IsDownloading = false;
            StateHasChanged();
        }
    }

    private ValueTask OnLocationChanging(LocationChangingContext context)
    {
        string baseUrl = Navigation.BaseUri;
        if (context.TargetLocation != baseUrl)
        {
            Task.Run(async () => await objZipService.ZipTheFiles());
        }
        return ValueTask.CompletedTask;
    }

    [JSInvokable]
    public async Task HandleBeforeUnload() => await objZipService.ZipTheFiles();

    public void Dispose() => objRef?.Dispose();
}