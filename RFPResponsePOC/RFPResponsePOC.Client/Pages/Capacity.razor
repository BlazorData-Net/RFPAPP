@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@using System.Text
@using BlazorWebAssemblyPDF.Services
@using RFPResponsePOC.Client.Services
@using System.IO
@using RFPResponsePOC.Model
@using RFPResponsePOC.Models
@using Newtonsoft.Json
@using Microsoft.AspNetCore.Components.Forms
@using RFPResponsePOC.AI
@inject NotificationService NotificationService
@inject DialogService DialogService
@inject LogService LogService
@inject NotificationService NotificationService
@inject DialogService DialogService
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject SettingsService _SettingsService
@inject NavigationManager Navigation
@inject PdfToPngService PdfService
@inject IJSRuntime JsRuntime
@inject HttpClient Http
<h3>Capacity</h3>
<br />
<RadzenUpload @ref="uploader"
              ChooseText="Upload capacity chart (.png/.jpg/.jpeg)" Accept=".png,.jpg,.jpeg,.pdf"
              Change=@OnCapacityChartUpload
              Multiple="false"
              Auto="true"
              Style="width: 100%"
              InputAttributes="@(new Dictionary<string,object>{ { "aria-label", "select file" }})">
</RadzenUpload>
<br />
@if (@InProgress)
{
    <div style="position: fixed; top: 0; left: 0; width: 100%; height: 100%;
    background-color: rgba(0,0,0,0.5); z-index: 1000;
    display: flex; align-items: center; justify-content: center;">
        <div class="rz-card" style="padding: 20px;">
            <RadzenText Text="@CurrentStatus" class="rz-m-10" Style="text-align: center" />
            <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
        </div>
    </div>
}
<br />
@if (capacityData?.Rooms != null)
{
    <RadzenDataGrid @ref="grid" Data="@capacityData.Rooms" TItem="Room" EditMode="DataGridEditMode.Single" AllowPaging="false" AllowColumnResize="true">
        <Columns>
            <RadzenDataGridColumn TItem="Room" Title="Edit" Context="r" Resizable="false">
                <Template Context="r">
                    <RadzenButton Icon="edit" Size="ButtonSize.Small" Click="@(() => grid.EditRow(r))" />
                </Template>
                <EditTemplate Context="r">
                    <RadzenButton Icon="save" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Primary" Click="@(() => SaveRow(r))" />
                    <RadzenButton Icon="close" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Light" Click="@(() => grid.CancelEditRow(r))" Style="margin-left:10px" />
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Room" Property="Name" Title="Name" Resizable="true" />
            <RadzenDataGridColumn TItem="Room" Property="SquareFeet" Title="Square Feet" Resizable="true">
                <EditTemplate Context="r">
                    <RadzenNumeric TValue="double?" Style="width:100%" @bind-Value="r.SquareFeet" />
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Room" Property="Length" Title="Length" Resizable="true">
                <EditTemplate Context="r">
                    <RadzenNumeric TValue="double?" Style="width:100%" @bind-Value="r.Length" />
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Room" Property="Width" Title="Width" Resizable="true">
                <EditTemplate Context="r">
                    <RadzenNumeric TValue="double?" Style="width:100%" @bind-Value="r.Width" />
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Room" Property="CeilingHeight" Title="Ceiling Height" Resizable="true">
                <EditTemplate Context="r">
                    <RadzenNumeric TValue="double?" Style="width:100%" @bind-Value="r.CeilingHeight" />
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Room" Property="FloorLevel" Title="Floor Level" Resizable="true">
                <EditTemplate Context="r">
                    <RadzenTextBox Style="width:100%" @bind-Value="r.FloorLevel" />
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Room" Property="HasNaturalLight" Title="Natural Light" Resizable="true">
                <EditTemplate Context="r">
                    <RadzenCheckBox TValue="bool?" @bind-Value="r.HasNaturalLight" />
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Room" Property="HasPillars" Title="Has Pillars" Resizable="true">
                <EditTemplate Context="r">
                    <RadzenCheckBox TValue="bool?" @bind-Value="r.HasPillars" />
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Room" Title="Capacities" Resizable="true">
                <Template Context="r">
                    <div>
                        <strong>Banquet:</strong> @r.Capacities.Banquet<br />
                        <strong>Conference:</strong> @r.Capacities.Conference<br />
                        <strong>Square:</strong> @r.Capacities.Square<br />
                        <strong>Reception:</strong> @r.Capacities.Reception<br />
                        <strong>School Room:</strong> @r.Capacities.SchoolRoom<br />
                        <strong>Theatre:</strong> @r.Capacities.Theatre<br />
                        <strong>U-Shape:</strong> @r.Capacities.UShape<br />
                        <strong>Hollow Square:</strong> @r.Capacities.HollowSquare<br />
                        <strong>Boardroom:</strong> @r.Capacities.Boardroom<br />
                        <strong>Crescent Rounds:</strong> @r.Capacities.CrescentRounds
                    </div>
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}
<!-- hidden canvas used for PDF conversions to PNG -->
<canvas id="pdfCanvas" style="display:none; border:1px solid #ccc;"></canvas>
@code {
    #nullable disable
    private IDisposable registration;

    string BasePath = @"/RFPResponsePOC";

    // Allow access to the JSRuntime
    private DotNetObjectReference<Capacity> objRef;

    // Reference to the RadzenUpload component
    Radzen.Blazor.RadzenUpload uploader;
    Radzen.Blazor.RadzenDataGrid<Room> grid;

    AIResponse result = new AIResponse();

    CapacityRoot capacityData;

    ZipService objZipService = new ZipService();

    private bool InProgress = false;
    private string CurrentStatus = "";

    // Run on page load
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Set a reference to the current instance of Home
            objRef = DotNetObjectReference.Create(this);

            // Register the beforeunload event with JavaScript
            await JsRuntime.InvokeVoidAsync("setupBeforeUnload", objRef);

            // Register the location changing handler
            registration =
            Navigation.RegisterLocationChangingHandler(OnLocationChanging);

            // Initialize the ZipService
            objZipService = new ZipService(JsRuntime, localStorage, _SettingsService, LogService);

            // Check if Capacity.json exists and load it
            var capacityJson = await GetCapacityJsonAsync();

            if (!string.IsNullOrEmpty(capacityJson))
            {
                capacityData = JsonConvert.DeserializeObject<CapacityRoot>(capacityJson);
                StateHasChanged();
            }
        }
    }

    #region JavaScript
    private ValueTask OnLocationChanging(LocationChangingContext context)
    {
        // Get the base URL
        string baseUrl = Navigation.BaseUri;

        // Detect that user is going to counter page
        if (context.TargetLocation != baseUrl)
        {
            // User is navigating away from the page - Zip any files
            // Zip up any files and store in LocalStorage
            Task.Run(async () => await objZipService.ZipTheFiles());
        }

        return ValueTask.CompletedTask;
    }

    [JSInvokable]
    public async Task HandleBeforeUnload()
    {
        // User is navigating away from the page - Zip any files
        // Zip up any files and store in LocalStorage
        await objZipService.ZipTheFiles();
    }
    #endregion

    private async Task OnCapacityChartUpload(UploadChangeEventArgs e)
    {
        try
        {
            InProgress = true;
            CurrentStatus = "Reading capacity chart...";
            StateHasChanged();

            var file = e.Files.FirstOrDefault();

            if (file is null)
            {
                InProgress = false;
                StateHasChanged();
                return;
            }

            byte[] pdfBytes;

            // If file type is PDF convert it to PNG first
            if (file.ContentType == "application/pdf")
            {
                var pdfUrl = await PdfService.GetPdfDataUrlAsync(file);
                if (pdfUrl != null)
                {
                    await PdfService.RenderPdfToCanvasAsync(pdfUrl, "pdfCanvas");
                    pdfBytes = await PdfService.GetCanvasPngBytesAsync("pdfCanvas");
                }
                else
                {
                    InProgress = false;
                    StateHasChanged();
                    return;
                }
            }
            else
            {
                // Read the file as a byte array
                using var stream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024); // 10MB limit
                using var ms = new MemoryStream();
                await stream.CopyToAsync(ms);
                pdfBytes = ms.ToArray();
            }

            // Read the contents of \Prompts\Capacity.prompt into prompt
            var OCRprompt = await Http.GetStringAsync("Prompts/OCR.prompt");

            // Instantiate orchestrator and settings
            var objOrchestratorMethods = new OrchestratorMethods(_SettingsService, LogService);
            var settingsService = new SettingsService();

            // Call the OpenAIFileAsync method with the settings, prompt, and PDF bytes
            result = await objOrchestratorMethods.CallOpenAIFileAsync(settingsService, OCRprompt, pdfBytes);

            // Process the OCR result

            CurrentStatus = "Converting capacity chart...";
            StateHasChanged();

            // Read the contents of \Prompts\Capacity.prompt into prompt
            var Capcityprompt = await Http.GetStringAsync("Prompts/Capacity.prompt");

            // Replace the placeholder in the prompt with the OCR result
            Capcityprompt = Capcityprompt.Replace("{{OCRResult}}", result.Response);

            // Call the OpenAIChatAsync method with the settings, prompt, and OCR result
            result = await objOrchestratorMethods.CallOpenAIAsync(settingsService, Capcityprompt);

            // Parse the JSON into objects for display
            capacityData = JsonConvert.DeserializeObject<CapacityRoot>(result.Response);

            // Save the JSON result to the virtual file system
            await File.WriteAllTextAsync($"{BasePath}//Capacity.json", result.Response);

            InProgress = false;
            StateHasChanged();

            // Handle result (show notification, update UI, etc.)
            if (result.Error == "")
            {
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Success",
                    Detail = "Capacity chart uploaded and processed.",
                    Duration = 4000
                });
            }
            else
            {
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = $"Failed to process the capacity chart. {result.Error}",
                    Duration = 4000
                });
            }

            // Clear the selected files so the list is removed
            await uploader.ClearFiles();
        }
        catch (Exception ex)
        {
            InProgress = false;
            StateHasChanged();

            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error",
                Detail = ex.Message,
                Duration = 8000
            });
        }
    }

    void SaveRow(Room room)
    {
        grid.UpdateRow(room);
        // Also save to file when a row is updated
        Task.Run(async () =>
        {
            var json = JsonConvert.SerializeObject(capacityData, Formatting.Indented);
            await File.WriteAllTextAsync($"{BasePath}//Capacity.json", json);
        });
    }

    private async Task<string> GetCapacityJsonAsync()
    {
        try
        {
            if (File.Exists($"{BasePath}//Capacity.json"))
            {
                return await File.ReadAllTextAsync($"{BasePath}//Capacity.json");
            }
        }
        catch (Exception ex)
        {
            // Log the exception if necessary
            Console.WriteLine($"Error reading Capacity.json: {ex.Message}");
        }
        return null;
    }

    public void Dispose()
    {
        objRef?.Dispose();
    }
}