@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@using System.Text
@using System.Collections.Generic
@using System.Linq
@using BlazorWebAssemblyPDF.Services
@using Newtonsoft.Json
@using RFPResponsePOC.Client.Services
@using RFPResponsePOC.Model
@using RFPResponsePOC.Models
@using Microsoft.AspNetCore.Components.Forms
@using RFPResponsePOC.AI
@using System.IO
@using Openize.Words
@using System.IO.Compression
@using System.Xml.Linq
@using Microsoft.AspNetCore.Components.Web
@inject NotificationService NotificationService
@inject DialogService DialogService
@inject IJSRuntime JsRuntime
@inject LogService LogService
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject SettingsService _SettingsService
@inject NavigationManager Navigation
@inject PdfToPngService PdfService
@inject HttpClient Http
<h3>Proposal</h3>
@if (InProgress)
{
    <div style="position: fixed; top: 0; left: 0; width: 100%; height: 100%;
                    background-color: rgba(0,0,0,0.5); z-index: 1000;
                    display: flex; align-items: center; justify-content: center;">
        <div class="rz-card" style="padding: 20px;">
            <RadzenText Text="@CurrentStatus" class="rz-m-10" Style="text-align: center" />
            <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
        </div>
    </div>
}
<br />
<RadzenUpload @ref="uploader"
              ChooseText="Upload Proposal (.docx/.pdf/.png/.jpg/.jpeg)" Accept=".docx,.png,.jpg,.jpeg,.pdf"
              Change=@OnProposalUpload
              Multiple="false"
              Auto="true"
              Style="width: 100%"
              InputAttributes="@(new Dictionary<string,object>{ { "aria-label", "select file" }})">
</RadzenUpload>
<br />
<RadzenButton Text="Edit Template" Icon="edit" Style="background-color: green; margin-top:10px;" ButtonStyle="ButtonStyle.Primary" Click="EditTemplate" />
<span>&nbsp;</span>
<RadzenButton Text="Detect Room Requests" Icon="add" Style="margin-bottom: 10px; background-color: orange;" ButtonStyle="ButtonStyle.Primary" Click="ProcessOCRText" />
<span>&nbsp;</span>
<RadzenButton Text="Calculate" Icon="calculate" Style="margin-bottom: 10px; background-color: blue;" ButtonStyle="ButtonStyle.Primary" Click="CalculateProposal" />
<br />
<RadzenCard>
    <RadzenTextArea @bind-Value="RFPText" Rows="10" Style="width: 100%; height: 300px;" />
</RadzenCard>

@if (proposalRows?.Any() == true)
{
    <RadzenDataGrid Data="@proposalRows" TItem="ProposalRow" EditMode="DataGridEditMode.Single" Editable="true" Style="margin-top:20px">
        <Columns>
            <RadzenDataGridColumn TItem="ProposalRow" Property="Name" Title="Name" />
            <RadzenDataGridColumn TItem="ProposalRow" Property="SelectedRoom" Title="Room">
                <EditTemplate Context="row">
                    <RadzenDropDown Data="@roomOptions" @bind-Value="row.SelectedRoom" Style="width:100%" />
                </EditTemplate>
                <Template Context="row">@row.SelectedRoom</Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="ProposalRow" Property="ManualRoom" Title="Manual Room">
                <EditTemplate Context="row">
                    <RadzenTextBox @bind-Value="row.ManualRoom" Style="width:100%" />
                </EditTemplate>
                <Template Context="row">@row.ManualRoom</Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="ProposalRow" Property="StartDate" Title="Start Date">
                <EditTemplate Context="row">
                    <RadzenDatePicker @bind-Value="row.StartDate" Style="width:100%" />
                </EditTemplate>
                <Template Context="row">@row.StartDate.ToShortDateString()</Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="ProposalRow" Property="StartTime" Title="Start Time">
                <EditTemplate Context="row">
                    <RadzenTextBox @bind-Value="row.StartTime" Style="width:100%" />
                </EditTemplate>
                <Template Context="row">@row.StartTime</Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="ProposalRow" Property="EndDate" Title="End Date">
                <EditTemplate Context="row">
                    <RadzenDatePicker @bind-Value="row.EndDate" Style="width:100%" />
                </EditTemplate>
                <Template Context="row">@row.EndDate.ToShortDateString()</Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="ProposalRow" Property="EndTime" Title="End Time">
                <EditTemplate Context="row">
                    <RadzenTextBox @bind-Value="row.EndTime" Style="width:100%" />
                </EditTemplate>
                <Template Context="row">@row.EndTime</Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="ProposalRow" Property="RoomType" Title="Room Type">
                <EditTemplate Context="row">
                    <RadzenTextBox @bind-Value="row.RoomType" Style="width:100%" />
                </EditTemplate>
                <Template Context="row">@row.RoomType</Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="ProposalRow" Property="Attendance" Title="Attendance">
                <EditTemplate Context="row">
                    <RadzenNumeric @bind-Value="row.Attendance" Style="width:100%" />
                </EditTemplate>
                <Template Context="row">@row.Attendance</Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="ProposalRow" Property="Notes" Title="Notes">
                <EditTemplate Context="row">
                    <RadzenTextBox @bind-Value="row.Notes" Style="width:100%" />
                </EditTemplate>
                <Template Context="row">@row.Notes</Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}

<!-- hidden canvas used for PDF conversions to PNG -->
<canvas id="pdfCanvas" style="display:none; border:1px solid #ccc;"></canvas>
@code {
#nullable disable
    private IDisposable registration;
    Radzen.Blazor.RadzenUpload uploader;
    // Allow access to the JSRuntime
    private DotNetObjectReference<Proposal> objRef;

    private string RFPText = string.Empty;
    private bool InProgress = false;
    private string CurrentStatus = "";

    AIResponse result = new AIResponse();

    ZipService objZipService = new ZipService();

    private List<ProposalRow> proposalRows = new();
    private List<string> roomOptions = new();

    public class ProposalRow
    {
        public string Name { get; set; }
        public string SelectedRoom { get; set; }
        public string ManualRoom { get; set; }
        public DateTime StartDate { get; set; }
        public string StartTime { get; set; }
        public DateTime EndDate { get; set; }
        public string EndTime { get; set; }
        public string RoomType { get; set; }
        public int Attendance { get; set; }
        public string Notes { get; set; }
    }

    // Run on page load
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Set a reference to the current instance of Home
            objRef = DotNetObjectReference.Create(this);

            // Register the beforeunload event with JavaScript
            await JsRuntime.InvokeVoidAsync("setupBeforeUnload", objRef);

            // Register the location changing handler
            registration =
            Navigation.RegisterLocationChangingHandler(OnLocationChanging);

            // Initialize the ZipService
            objZipService = new ZipService(JsRuntime, localStorage, _SettingsService, LogService);
        }
    }

    async Task EditTemplate(MouseEventArgs args)
    {
        await DialogService.OpenAsync<EditTemplate>(
            "Edit Template",
            new Dictionary<string, object>(),
            new DialogOptions { Width = "700px", Height = "600px" });
    }

    #region JavaScript
    private ValueTask OnLocationChanging(LocationChangingContext context)
    {
        // Get the base URL
        string baseUrl = Navigation.BaseUri;

        // Detect that user is going to counter page
        if (context.TargetLocation != baseUrl)
        {
            // User is navigating away from the page - Zip any files
            // Zip up any files and store in LocalStorage
            Task.Run(async () => await objZipService.ZipTheFiles());
        }

        return ValueTask.CompletedTask;
    }

    [JSInvokable]
    public async Task HandleBeforeUnload()
    {
        // User is navigating away from the page - Zip any files
        // Zip up any files and store in LocalStorage
        await objZipService.ZipTheFiles();
    }
    #endregion

    private async Task OnProposalUpload(UploadChangeEventArgs e)
    {
        try
        {
            InProgress = true;
            CurrentStatus = "Reading RFP...";
            StateHasChanged();

            var file = e.Files.FirstOrDefault();

            if (file is null)
            {
                InProgress = false;
                StateHasChanged();
                return;
            }

            if (Path.GetExtension(file.Name).Equals(".docx", StringComparison.OrdinalIgnoreCase))
            {
                using var stream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024);
                using var ms = new MemoryStream();
                await stream.CopyToAsync(ms);
                ms.Position = 0;

                // Use ZipArchive and LINQ to XML to read body elements
                using var archive = new ZipArchive(ms, ZipArchiveMode.Read, leaveOpen: true);
                var entry = archive.GetEntry("word/document.xml");

                if (entry != null)
                {
                    using var entryStream = entry.Open();
                    var xdoc = XDocument.Load(entryStream);
                    XNamespace w = "http://schemas.openxmlformats.org/wordprocessingml/2006/main";
                    var sb = new StringBuilder();

                    var body = xdoc.Root?.Element(w + "body");
                    if (body != null)
                    {
                        foreach (var element in body.Elements())
                        {
                            if (element.Name == w + "p")
                            {
                                foreach (var text in element.Descendants(w + "t"))
                                {
                                    sb.Append(text.Value);
                                }
                                sb.AppendLine();
                            }
                            else if (element.Name == w + "tbl")
                            {
                                foreach (var row in element.Elements(w + "tr"))
                                {
                                    foreach (var cell in row.Elements(w + "tc"))
                                    {
                                        foreach (var text in cell.Descendants(w + "t"))
                                        {
                                            sb.Append(text.Value);
                                        }
                                        sb.Append("\t");
                                    }
                                    sb.AppendLine();
                                }
                                sb.AppendLine();
                            }
                        }
                    }

                    RFPText = sb.ToString();
                }
            }
            else
            {
                byte[] pdfBytes;
                if (file.ContentType == "application/pdf")
                {
                    var pdfUrl = await PdfService.GetPdfDataUrlAsync(file);
                    if (pdfUrl != null)
                    {
                        await PdfService.RenderPdfToCanvasAsync(pdfUrl, "pdfCanvas");
                        pdfBytes = await PdfService.GetCanvasPngBytesAsync("pdfCanvas");
                    }
                    else
                    {
                        InProgress = false;
                        StateHasChanged();
                        return;
                    }
                }
                else
                {
                    // Read the file as a byte array
                    using var stream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024); // 10MB limit
                    using var ms = new MemoryStream();
                    await stream.CopyToAsync(ms);
                    pdfBytes = ms.ToArray();
                }

                var OCRprompt = await Http.GetStringAsync("Prompts/OCR.prompt");

                var objOrchestratorMethods = new OrchestratorMethods(_SettingsService, LogService);
                var settingsService = new SettingsService();

                result = await objOrchestratorMethods.CallOpenAIFileAsync(settingsService, OCRprompt, pdfBytes);
                RFPText = result.Response;
            }

            // Clear the selected files so the list is removed
            await uploader.ClearFiles();
            InProgress = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            InProgress = false;
            StateHasChanged();

            await LogService.WriteToLogAsync($"[{DateTime.Now}] ERROR: Exception in OnProposalUpload - {ex.Message}");

            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error",
                Detail = ex.Message,
                Duration = 8000
            });
        }
    }

    private async Task CalculateProposal()
    {
        try
        {
            InProgress = true;
            CurrentStatus = "Calculating...";
            StateHasChanged();

            await LogService.WriteToLogAsync($"[{DateTime.Now}] CalculateProposal method started");
            
            // Log the current RFPText content to help debug the JSON structure
            await LogService.WriteToLogAsync($"[{DateTime.Now}] RFPText content (first 500 chars): {RFPText?.Substring(0, Math.Min(500, RFPText?.Length ?? 0))}");

            // Check if RFPText is empty or null
            if (string.IsNullOrWhiteSpace(RFPText))
            {
                await LogService.WriteToLogAsync($"[{DateTime.Now}] WARNING: RFPText is empty or null in CalculateProposal");
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Warning,
                    Summary = "Warning",
                    Detail = "Please upload and process a proposal first.",
                    Duration = 4000
                });
                return;
            }

            // Try to parse the JSON to determine its structure
            try
            {
                // First, let's check if it's already a valid JSON array
                var testParse = JsonConvert.DeserializeObject(RFPText);
                await LogService.WriteToLogAsync($"[{DateTime.Now}] JSON parsing test successful. Object type: {testParse?.GetType().Name}");
                
                // Check if it's an object that contains an array property
                if (testParse is Newtonsoft.Json.Linq.JObject jObject)
                {
                    await LogService.WriteToLogAsync($"[{DateTime.Now}] Detected JSON object. Properties: {string.Join(", ", jObject.Properties().Select(p => p.Name))}");
                    
                    // Look for potential array properties
                    var arrayProperty = jObject.Properties().FirstOrDefault(p => p.Value is Newtonsoft.Json.Linq.JArray);
                    if (arrayProperty != null)
                    {
                        await LogService.WriteToLogAsync($"[{DateTime.Now}] Found array property: {arrayProperty.Name}");
                        RFPText = arrayProperty.Value.ToString();
                    }
                    else
                    {
                        // Check if the object itself can be converted to an array (wrap in array)
                        await LogService.WriteToLogAsync($"[{DateTime.Now}] No array property found, wrapping object in array");
                        RFPText = $"[{RFPText}]";
                    }
                }
            }
            catch (JsonReaderException jsonReadEx)
            {
                await LogService.WriteToLogAsync($"[{DateTime.Now}] ERROR: JSON format is invalid - {jsonReadEx.Message}");
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "JSON Format Error",
                    Detail = "The text does not contain valid JSON.",
                    Duration = 8000
                });
                return;
            }

            // Create calculator with LogService
            var calculator = new CalculateProposale("/RFPResponsePOC", LogService);
            var assigned = await calculator.CalculateAsync(RFPText);

            try
            {
                var capacityJson = await File.ReadAllTextAsync("/RFPResponsePOC/Capacity.json");
                var capacity = JsonConvert.DeserializeObject<CapacityRoot>(capacityJson);
                roomOptions = capacity?.Rooms?.Select(r => r.Name).OrderBy(n => n).ToList() ?? new List<string>();
            }
            catch (Exception ex)
            {
                await LogService.WriteToLogAsync($"[{DateTime.Now}] WARNING: Unable to load Capacity.json - {ex.Message}");
                roomOptions = new List<string>();
            }

            proposalRows = assigned.Select(a => new ProposalRow
            {
                Name = a.Request.Name,
                SelectedRoom = a.AssignedRoom,
                ManualRoom = string.Empty,
                StartDate = a.Request.StartDate,
                StartTime = a.Request.StartTime.ToString(@"hh\\:mm"),
                EndDate = a.Request.EndDate,
                EndTime = a.Request.EndTime.ToString(@"hh\\:mm"),
                RoomType = a.Request.RoomType,
                Attendance = a.Request.Attendance,
                Notes = a.Request.Notes
            }).ToList();

            // Convert results back to JSON for display
            RFPText = JsonConvert.SerializeObject(assigned, Formatting.Indented);

            await LogService.WriteToLogAsync($"[{DateTime.Now}] CalculateProposal completed successfully with {assigned.Count} assignments");

            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Success",
                Detail = "Calculation completed.",
                Duration = 4000
            });
        }
        catch (JsonException jsonEx)
        {
            await LogService.WriteToLogAsync($"[{DateTime.Now}] ERROR: JSON deserialization error in CalculateProposal - {jsonEx.Message}");
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "JSON Error",
                Detail = $"Failed to parse JSON data: {jsonEx.Message}. Please ensure the proposal has been processed correctly.",
                Duration = 8000
            });
        }
        catch (Exception ex)
        {
            await LogService.WriteToLogAsync($"[{DateTime.Now}] ERROR: Exception in CalculateProposal - {ex.Message}");
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error",
                Detail = ex.Message,
                Duration = 8000
            });
        }

        InProgress = false;
        StateHasChanged();
    }

    private async Task ProcessOCRText()
    {
        try
        {
            await LogService.WriteToLogAsync($"[{DateTime.Now}] ProcessOCRText method started");

            // Process the OCR text
            var objOrchestratorMethods = new OrchestratorMethods(_SettingsService, LogService);
            var settingsService = new SettingsService();

            InProgress = true;
            CurrentStatus = "Converting...";
            StateHasChanged();

            // Read the contents of \Prompts\Proposal.prompt into prompt
            var Proposalprompt = await Http.GetStringAsync("Prompts/Proposal.prompt");

            // Replace the placeholder in the prompt with the OCR result
            Proposalprompt = Proposalprompt.Replace("{{OCRResult}}", RFPText);

            // Call the OpenAIChatAsync method with the settings, prompt, and OCR result
            result = await objOrchestratorMethods.CallOpenAIAsync(settingsService, Proposalprompt);

            RFPText = $"[{result.Response}]";

            CurrentStatus = "Processing RFP...";
            StateHasChanged();

            InProgress = false;
            StateHasChanged();

            // Handle result (show notification, update UI, etc.)
            if (result.Error == "")
            {
                await LogService.WriteToLogAsync($"[{DateTime.Now}] ProcessOCRText completed successfully");
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Success",
                    Detail = "Uploaded and processed.",
                    Duration = 4000
                });
            }
            else
            {
                await LogService.WriteToLogAsync($"[{DateTime.Now}] ERROR: ProcessOCRText failed - {result.Error}");
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = $"Failed to process... {result.Error}",
                    Duration = 4000
                });
            }
        }
        catch (Exception ex)
        {
            InProgress = false;
            StateHasChanged();

            await LogService.WriteToLogAsync($"[{DateTime.Now}] ERROR: Exception in ProcessOCRText - {ex.Message}");
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error",
                Detail = ex.Message,
                Duration = 8000
            });
        }
    }

    public void Dispose()
    {
        objRef?.Dispose();
    }
}