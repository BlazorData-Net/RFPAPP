@using RFPResponseAPP.Client.Services
@using RFPResponseAPP.Model
@using RFPResponseAPP.Models
@using System.Collections.Generic
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@inherits LayoutComponentBase
@implements IAsyncDisposable
@inject IJSRuntime JSRuntime
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NotificationService NotificationService
@inject DialogService DialogService
@inject SettingsService SettingsService
@inject LogService _LogService
@inject AppMetadata _AppMetadata
@inject HttpClient Http
<RadzenDialog />
<RadzenNotification />
<RadzenTooltip />
<RadzenContextMenu />
<main>
    <div class="top-row px-4 d-flex justify-content-between align-items-center">
        <div class="d-flex align-items-center">
            <img src="images\\RFPResponseCreatorLogo_small.png" alt="RFP Response Creator Logo" class="logo me-3" style="height:40px; width: auto;" />
        </div>
        <div class="d-flex align-items-center">
            @if (UpdateAvailable)
            {
                <a href="https://BlazorData.net/" target="_blank" class="me-2">* Update Available - Close web browser and reload *</a>
            }
            else
            {
                <a href="https://BlazorData.net/" target="_blank" class="me-2">BlazorData.net</a>
            }
            <RadzenButton Click="@(async () => await SaveSettingsaaAndCloseBrowserTab())" Disabled="@isSaving" Size="ButtonSize.ExtraSmall">
                @if (isSaving)
                {
                    <span class="spinner-border spinner-border-sm"></span>
                }
                else
                {
                    <RadzenIcon Icon="save" class="me-1" />
                    <span>Save and Close</span>
                }
            </RadzenButton>
        </div>
    </div>

    <article class="content px-4">
        @Body
    </article>
</main>
<RadzenFooter>
    <div class="row justify-content-start align-items-center px-2 pt-2 p-3 mb-2 bg-light text-dark">
        <div class="col-12 d-flex align-items-left">
            <p>@@2025 by BlazorData.net | Version @_AppMetadata.Version</p>
        </div>
    </div>
</RadzenFooter>
<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">ðŸ—™</span>
</div>
@code {
    #nullable disable
    [Parameter] public EventCallback SettingsChanged { get; set; }

    private DotNetObjectReference<MainLayout> objRef;
    ZipService objZipService = new ZipService();
    private IJSObjectReference _browserModule;
    private bool isSaving;
    bool UpdateAvailable = false;
    private string versionLocal = string.Empty;
    private string versionPublished = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var guid = SettingsService.Settings?.ApplicationSettings?.GUID;
            versionLocal = _AppMetadata.Version;

            if (!string.IsNullOrEmpty(guid) && !string.IsNullOrEmpty(versionLocal))
            {
                var response = await Http.GetAsync($"https://blazordata.net/api/VersionOnline/GetRFPResponseCreatorVersionOnline?paramGUID={guid}&paramCurrentVersion={versionLocal}");
                response.EnsureSuccessStatusCode();
                versionPublished = await response.Content.ReadAsStringAsync();

                if (ConvertToInteger(versionPublished) > ConvertToInteger(versionLocal))
                {
                    UpdateAvailable = true;
                }
            }
        }
        catch (Exception ex)
        {
            await _LogService.WriteToLogAsync(ex.Message);
        }

        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            objRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("setupBeforeUnload", objRef);

            objZipService = new ZipService(JSRuntime, localStorage, SettingsService, _LogService, DialogService);
            _browserModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/browserInterop.js");
        }
    }

    private async Task SaveSettingsaaAndCloseBrowserTab()
    {
        isSaving = true;

        StateHasChanged();

        // pause for 1 second to show spinner
        await Task.Delay(1000);

        await SettingsService.SaveSettingsAsync();

        await objZipService.ZipTheFiles();

        if (_browserModule is not null)
        {
            await _browserModule.InvokeVoidAsync("closeBrowserTab");
        }
    }

    public async ValueTask DisposeAsync()
    {
        // Remove the beforeunload callback when component is disposed
        if (objRef != null)
        {
            try
            {
                await JSRuntime.InvokeVoidAsync("removeBeforeUnloadCallback", objRef);
            }
            catch (Exception)
            {
                // Ignore errors during disposal
            }
        }
        
        if (_browserModule is not null)
        {
            await _browserModule.DisposeAsync();
        }
        objRef?.Dispose();
    }

    private int ConvertToInteger(string strParamVersion)
    {
        int intVersionNumber = 0;
        var strSegments = strParamVersion.Split('.');
        int i = 0;
        List<int> colMultiplyers = new List<int> { 10000, 100, 1 };
        foreach (var strSegment in strSegments)
        {
            int intSegmentNumber = Convert.ToInt32(strSegment);
            intVersionNumber += intSegmentNumber * colMultiplyers[i];
            i++;
        }
        return intVersionNumber;
    }
}
