<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="/" />
    <link rel="stylesheet" href="@Assets["lib/bootstrap/dist/css/bootstrap.min.css"]" />
    <link rel="stylesheet" href="@Assets["app.css"]" />
    <link rel="stylesheet" href="@Assets["RFPResponsePOC.styles.css"]" />
    <ImportMap />
    <link rel="icon" type="image/png" href="favicon.png" />
    <HeadOutlet @rendermode="InteractiveWebAssembly" />
    <RadzenTheme Theme="default" @rendermode="InteractiveWebAssembly" />
</head>

<body>
    <Routes @rendermode="InteractiveWebAssembly" />
    <script src="_framework/blazor.web.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="js/pdfInterop.js"></script>
    <script>
        // Initialize jsPDF from the UMD module after it loads
        window.addEventListener('DOMContentLoaded', function () {
            if (window.jspdf && window.jspdf.jsPDF) {
                window.jsPDF = window.jspdf.jsPDF;
            }
        });
    </script>
    <script src="_content/Radzen.Blazor/Radzen.Blazor.js?v=@(typeof(Radzen.Colors).Assembly.GetName().Version)"></script>
    <script>
        window.saveAsFile = async (filename, base64String) => {
            // Convert Base64 string to a Blob
            const byteCharacters = atob(base64String);
            const byteNumbers = new Array(byteCharacters.length);
            for (let i = 0; i < byteCharacters.length; i++) {
                byteNumbers[i] = byteCharacters.charCodeAt(i);
            }
            const byteArray = new Uint8Array(byteNumbers);
            const blob = new Blob([byteArray], { type: "application/zip" });

            // Create a link element and download the file
            const link = document.createElement('a');
            link.href = window.URL.createObjectURL(blob);
            link.download = filename;
            link.click();
        }
    </script>
    <script>
        window.downloadWordDocument = function (filename, base64String) {
            try {
                // Convert Base64 string to a Blob
                const byteCharacters = atob(base64String);
                const byteNumbers = new Array(byteCharacters.length);
                for (let i = 0; i < byteCharacters.length; i++) {
                    byteNumbers[i] = byteCharacters.charCodeAt(i);
                }
                const byteArray = new Uint8Array(byteNumbers);
                const blob = new Blob([byteArray], { type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' });

                // Create a link element and download the file
                const link = document.createElement('a');
                const url = URL.createObjectURL(blob);
                link.setAttribute('href', url);
                link.setAttribute('download', filename);
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
                URL.revokeObjectURL(url);
                
                return true;
            } catch (error) {
                console.error('Error downloading Word document:', error);
                return false;
            }
        }
    </script>
    <script>
        // Store multiple beforeunload callbacks
        window.beforeUnloadCallbacks = window.beforeUnloadCallbacks || [];
        window.beforeUnloadHandlerAttached = window.beforeUnloadHandlerAttached || false;

        window.setupBeforeUnload = function (dotNetRef) {
            // Add the callback to our array if it has the HandleBeforeUnload method
            if (dotNetRef && typeof dotNetRef.invokeMethodAsync === 'function') {
                // Remove any existing reference to the same object to avoid duplicates
                window.beforeUnloadCallbacks = window.beforeUnloadCallbacks.filter(ref => ref !== dotNetRef);
                window.beforeUnloadCallbacks.push(dotNetRef);
            }

            // Only attach the event listener once
            if (!window.beforeUnloadHandlerAttached) {
                window.addEventListener("beforeunload", function (event) {
                    // Call HandleBeforeUnload on all registered callbacks
                    window.beforeUnloadCallbacks.forEach(callback => {
                        try {
                            // Check if the method exists before calling it
                            callback.invokeMethodAsync("HandleBeforeUnload").catch(error => {
                                console.warn("Error calling HandleBeforeUnload:", error);
                            });
                        } catch (error) {
                            console.warn("Error invoking HandleBeforeUnload:", error);
                        }
                    });
                });
                window.beforeUnloadHandlerAttached = true;
            }
        };

        // Optional: Function to remove a callback
        window.removeBeforeUnloadCallback = function (dotNetRef) {
            if (window.beforeUnloadCallbacks) {
                window.beforeUnloadCallbacks = window.beforeUnloadCallbacks.filter(ref => ref !== dotNetRef);
            }
        };
    </script>
</body>

</html>
